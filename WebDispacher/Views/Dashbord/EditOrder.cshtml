@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization;
@using WebDispacher.Constants;
@using WebDispacher.Service;

@model WebDispacher.ViewModels.Order.EditOrderViewModel

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Dashboard | Edit Order";

    var baseStatuses = new Dictionary<string, string>
            {
                [OrderConstants.OrderStatusNewLoad] = Localizer["NewLoad"].Value,
                [OrderConstants.OrderStatusPickedUp] = Localizer["PickedUp"].Value,
                [OrderConstants.OrderStatusDelivered] = Localizer["Delivered"].Value
            };


    if (Model.CurrentStatus != null)
    { 
        var isState = baseStatuses.TryAdd(Model.CurrentStatus.StatusName, Model.CurrentStatus.StatusName);
    }
}
<link rel="stylesheet" href="~/libs/intl-tel-input-master/css/intlTelInput.css">
<script src="~/libs/intl-tel-input-master/js/intlTelInput.js"></script>
<body>
    <div class="admin Billing">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="tabContente">
                        <div class="title text-info-padding-5">
                            <a href='/Dashbord/Order/@ViewData["Status"].ToString()'>@Localizer["BackToOrders"]</a>
                        </div>
                        <h2 style="margin-block: 15px;">@Localizer["CreateOrderHeader"]</h2>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="tabContente">
                        <form action="SavaOrder" method="post">
                            <input id="idOrder" type="hidden" name="Id" style="display:none;" value="@Model.Id" />
                            <div class="w1">
                                <label for="">
                                    @Localizer["LoadId"]
                                    <input type="text" id="idLoad" asp-for="OrderId" value="@Model.OrderId">
                                </label>
                                <label for="">
                                    @Localizer["Status"]
                                    <select asp-for="CurrentStatus.StatusName" id="statusId">
                                        @foreach(var item in baseStatuses)
                                        {
                                            <option value=@item.Key>@item.Value</option>
                                        }
                                    </select>
                                </label>
                                <label for="">
                                    @Localizer["Contact"]
                                    <input type="text" id="contactId" asp-for="Contact" value="@Model.Contact">
                                </label>
                                <label for="">
                                    @Localizer["Phone"]
                                    <div class="intl-tel-input">
                                        <input data-default-country="auto" type="text" id="phoneC" asp-for="PhoneNumber.Number" value="@Model.PhoneNumber.Number" pattern="@PatternConstants.PhoneNumberWithoutCountryCode" placeholder="(XXX)-XXX-XXXX - @Localizer["PhoneNumber"]">
                                        <input type="hidden" id="country-code-dialcode-contact" asp-for="PhoneNumber.DialCode" value="@Model.PhoneNumber.DialCode">
                                        <input type="hidden" id="country-code-iso2-contact" asp-for="PhoneNumber.Iso2" value="@Model.PhoneNumber.Iso2">
                                        <input type="hidden" id="country-code-name-contact" asp-for="PhoneNumber.Name" value="@Model.PhoneNumber.Name">
                                    </div>
                                </label>
                                <h3>@Localizer["PichupHeader"]</h3>
                                <label for="">
                                    @Localizer["Name"]
                                    <input type="text" id="nameP" value="@Model.PickedUp.Name" placeholder="@Localizer["Name"]" asp-for="PickedUp.Name">
                                </label>
                                <label for="">
                                    @Localizer["Contact"]
                                    <input type="text" id="contactNameP" asp-for="PickedUp.ContactName" value="@Model.PickedUp.ContactName" placeholder="@Localizer["ContactName"]">
                                </label>
                                <label for="">
                                    @Localizer["Address"]
                                    <input type="text" id="addressP" asp-for="PickedUp.Address" value="@Model.PickedUp.Address" placeholder="@Localizer["Address"]">
                                </label>
                                <label for="">
                                    @Localizer["City"]
                                    <input type="text" pattern="@PatternConstants.OnlyLetters" id="cityP" asp-for="PickedUp.City" value="@Model.PickedUp.City" placeholder="@Localizer["City"]">
                                </label>
                                <label for="">
                                    @Localizer["State"]
                                    <select id="stateP" asp-for="PickedUp.State" value="@Model.PickedUp.State">
                                        <option value="AL">Alabama</option>
                                        <option value="AK">Alaska</option>
                                        <option value="AZ">Arizona</option>
                                        <option value="AR">Arkansas</option>
                                        <option value="CA">California</option>
                                        <option value="CO">Colorado</option>
                                        <option value="CT">Connecticut</option>
                                        <option value="DE">Delaware</option>
                                        <option value="DC">District Of Columbia</option>
                                        <option value="FL">Florida</option>
                                        <option value="GA">Georgia</option>
                                        <option value="HI">Hawaii</option>
                                        <option value="ID">Idaho</option>
                                        <option value="IL">Illinois</option>
                                        <option value="IN">Indiana</option>
                                        <option value="IA">Iowa</option>
                                        <option value="KS">Kansas</option>
                                        <option value="KY">Kentucky</option>
                                        <option value="LA">Louisiana</option>
                                        <option value="ME">Maine</option>
                                        <option value="MD">Maryland</option>
                                        <option value="MA">Massachusetts</option>
                                        <option value="MI">Michigan</option>
                                        <option value="MN">Minnesota</option>
                                        <option value="MS">Mississippi</option>
                                        <option value="MO">Missouri</option>
                                        <option value="MT">Montana</option>
                                        <option value="NE">Nebraska</option>
                                        <option value="NV">Nevada</option>
                                        <option value="NH">New Hampshire</option>
                                        <option value="NJ">New Jersey</option>
                                        <option value="NM">New Mexico</option>
                                        <option value="NY">New York</option>
                                        <option value="NC">North Carolina</option>
                                        <option value="ND">North Dakota</option>
                                        <option value="OH">Ohio</option>
                                        <option value="OK">Oklahoma</option>
                                        <option value="OR">Oregon</option>
                                        <option value="PA">Pennsylvania</option>
                                        <option value="RI">Rhode Island</option>
                                        <option value="SC">South Carolina</option>
                                        <option value="SD">South Dakota</option>
                                        <option value="TN">Tennessee</option>
                                        <option value="TX">Texas</option>
                                        <option value="UT">Utah</option>
                                        <option value="VT">Vermont</option>
                                        <option value="VA">Virginia</option>
                                        <option value="WA">Washington</option>
                                        <option value="WV">West Virginia</option>
                                        <option value="WI">Wisconsin</option>
                                        <option value="WY">Wyoming</option>
                                    </select>
                                </label>
                                <label for="">
                                    @Localizer["Zip"]
                                    <input type="text" id="zipP" asp-for="PickedUp.ZipCode" value="@Model.PickedUp.ZipCode" maxlength="5" max="99999" pattern="@PatternConstants.ZipOnlyFiveDigits" placeholder="XXXXX - @Localizer["ZipCode"]">
                                </label>
                                <label for="">
                                    @Localizer["Phone"]
                                    <input data-default-country="auto" type="text" id="phoneP" asp-for="PickedUp.PhoneNumber.Number" placeholder="(XXX)-XXX-XXXX - @Localizer["PhoneNumber"]"  pattern="@PatternConstants.PhoneNumberWithoutCountryCode" value="@Model.PickedUp.PhoneNumber.Number">
                                    <input type="hidden" id="country-code-dialcode-pickedup" asp-for="PickedUp.PhoneNumber.DialCode" value="@Model.PickedUp.PhoneNumber.DialCode">
                                    <input type="hidden" id="country-code-iso2-pickedup" asp-for="PickedUp.PhoneNumber.Iso2" value="@Model.PickedUp.PhoneNumber.Iso2">
                                    <input type="hidden" id="country-code-name-pickedup" asp-for="PickedUp.PhoneNumber.Name" value="@Model.PickedUp.PhoneNumber.Name">
                                </label>
                                <label for="">
                                    @Localizer["Email"]
                                    <input id="emailP" pattern="@PatternConstants.Email" asp-for="PickedUp.Email" type="email" value="@Model.PickedUp.Email" placeholder="@Localizer["Email"]">
                                </label>
                                <label for="">
                                    @Localizer["ScheduledPickupDate"]
                                    <input type="date" id="scheduledPickupDateP" asp-for="DateTimePickedUp" value="@Model.DateTimePickedUp.ToString(DateTimeFormats.BaseCalendarDate)">
                                </label>
                            </div>
                            <div class="w1">
                                <label style="margin-bottom: 7px;" for="">
                                    @Localizer["InstructionsHeader"]
                                    <textarea type="text" id="instructions" class="textarea-resize-none" asp-for="Instructions" style="height:152px;">@Model.Instructions</textarea>
                                </label>
                                <label for="">
                                    @Localizer["Fax"]
                                    <div class="intl-tel-input">
                                        <input data-default-country="auto" type="text" id="phoneFax" asp-for="FaxNumber.Number" value="@Model.FaxNumber.Number" pattern="@PatternConstants.PhoneNumberWithoutCountryCode" placeholder="(XXX)-XXX-XXXX - @Localizer["FaxNumber"]">
                                        <input type="hidden" id="country-code-dialcode-fax" asp-for="FaxNumber.DialCode" value="@Model.FaxNumber.DialCode">
                                        <input type="hidden" id="country-code-iso2-fax" asp-for="FaxNumber.Iso2" value="@Model.FaxNumber.Iso2">
                                        <input type="hidden" id="country-code-name-fax" asp-for="FaxNumber.Name" value="@Model.FaxNumber.Name">
                                    </div>
                                </label>
                                <label for="">
                                    @Localizer["McNumber"]
                                    <input type="text" id="iccmcC" asp-for="McNumber" value="@Model.McNumber">
                                </label>
                                <h3>@Localizer["DeliveryInfoHeader"]</h3>
                                <label for="">
                                    @Localizer["Name"]
                                    <input type="text" id="nameD" asp-for="Delivery.Name" value="@Model.Delivery.Name" placeholder="@Localizer["Name"]">
                                </label>
                                <label for="">
                                    @Localizer["Contact"]
                                    <input type="text" id="contactD" asp-for="Delivery.ContactName" value="@Model.Delivery.ContactName" placeholder="@Localizer["ContactName"]">
                                </label>
                                <label for="">
                                    @Localizer["Address"]
                                    <input type="text" id="addressD" asp-for="Delivery.Address" value="@Model.Delivery.Address" placeholder="@Localizer["Address"]">
                                </label>
                                <label for="">
                                    @Localizer["City"]
                                    <input type="text" pattern="@PatternConstants.OnlyLetters" id="cityD" asp-for="Delivery.City" value="@Model.Delivery.City" placeholder="@Localizer["City"]">
                                </label>
                                <label for="">
                                    @Localizer["State"]
                                    <select id="stateD" asp-for="Delivery.State" value="@Model.Delivery.State">
                                        <option value="AL">Alabama</option>
                                        <option value="AK">Alaska</option>
                                        <option value="AZ">Arizona</option>
                                        <option value="AR">Arkansas</option>
                                        <option value="CA">California</option>
                                        <option value="CO">Colorado</option>
                                        <option value="CT">Connecticut</option>
                                        <option value="DE">Delaware</option>
                                        <option value="DC">District Of Columbia</option>
                                        <option value="FL">Florida</option>
                                        <option value="GA">Georgia</option>
                                        <option value="HI">Hawaii</option>
                                        <option value="ID">Idaho</option>
                                        <option value="IL">Illinois</option>
                                        <option value="IN">Indiana</option>
                                        <option value="IA">Iowa</option>
                                        <option value="KS">Kansas</option>
                                        <option value="KY">Kentucky</option>
                                        <option value="LA">Louisiana</option>
                                        <option value="ME">Maine</option>
                                        <option value="MD">Maryland</option>
                                        <option value="MA">Massachusetts</option>
                                        <option value="MI">Michigan</option>
                                        <option value="MN">Minnesota</option>
                                        <option value="MS">Mississippi</option>
                                        <option value="MO">Missouri</option>
                                        <option value="MT">Montana</option>
                                        <option value="NE">Nebraska</option>
                                        <option value="NV">Nevada</option>
                                        <option value="NH">New Hampshire</option>
                                        <option value="NJ">New Jersey</option>
                                        <option value="NM">New Mexico</option>
                                        <option value="NY">New York</option>
                                        <option value="NC">North Carolina</option>
                                        <option value="ND">North Dakota</option>
                                        <option value="OH">Ohio</option>
                                        <option value="OK">Oklahoma</option>
                                        <option value="OR">Oregon</option>
                                        <option value="PA">Pennsylvania</option>
                                        <option value="RI">Rhode Island</option>
                                        <option value="SC">South Carolina</option>
                                        <option value="SD">South Dakota</option>
                                        <option value="TN">Tennessee</option>
                                        <option value="TX">Texas</option>
                                        <option value="UT">Utah</option>
                                        <option value="VT">Vermont</option>
                                        <option value="VA">Virginia</option>
                                        <option value="WA">Washington</option>
                                        <option value="WV">West Virginia</option>
                                        <option value="WI">Wisconsin</option>
                                        <option value="WY">Wyoming</option>
                                    </select>
                                </label>
                                <label for="">
                                    @Localizer["Zip"]
                                    <input type="text" id="zipD" asp-for="Delivery.ZipCode" value="@Model.Delivery.ZipCode" max="99999" maxlength="5" pattern="@PatternConstants.ZipOnlyFiveDigits" placeholder="XXXXX - @Localizer["ZipCode"]">
                                </label>
                                <label for="">
                                    @Localizer["Phone"]
                                    <input data-default-country="auto" type="text" id="phoneD" asp-for="Delivery.PhoneNumber.Number" value="@Model.Delivery.PhoneNumber.Number" pattern="@PatternConstants.PhoneNumberWithoutCountryCode" placeholder="(XXX)-XXX-XXXX - @Localizer["PhoneNumber"]">
                                    <input type="hidden" id="country-code-dialcode-delivery" asp-for="Delivery.PhoneNumber.DialCode" value="@Model.Delivery.PhoneNumber.DialCode">
                                    <input type="hidden" id="country-code-iso2-delivery" asp-for="Delivery.PhoneNumber.Iso2" value="@Model.Delivery.PhoneNumber.Iso2">
                                    <input type="hidden" id="country-code-name-delivery" asp-for="Delivery.PhoneNumber.Name" value="@Model.Delivery.PhoneNumber.Name">
                                </label>
                                <label for="">
                                    @Localizer["Email"]
                                    <input asp-for="Delivery.Email" pattern="@PatternConstants.Email" id="emailD" type="email" value="@Model.Delivery.Email" placeholder="@Localizer["Email"]">
                                </label>
                                <label for="">
                                    @Localizer["ScheduledDeliveryDate"]
                                    <input type="date" id="scheduledDeliveryEstimated" asp-for="DateTimeDelivery" value="@Model.DateTimeDelivery.ToString(DateTimeFormats.BaseCalendarDate)">
                                </label>
                            </div>
                            <div class="w3">
                                <h3>@Localizer["PaymentInfoHeader"]</h3>
                                <label for="">
                                    @Localizer["PaymentMethod"]
                                    <select id="paymentMethod" asp-for="PaymentMethod" value="@Model.PaymentMethod">
                                        <option value="COP">COP</option>
                                        <option value="COD">COD</option>
                                        <option value="1 days">1 days</option>
                                        <option value="2 days">2 days</option>
                                        <option value="5 days">5 days</option>
                                        <option value="10 days">10 days</option>
                                        <option value="15 days">15 days</option>
                                    </select>
                                </label>
                                <label for="">
                                    @Localizer["Price"]
                                    <input type="text" oninput="validateNonNegativeNumberWithTimer(this)" id="price" asp-for="Price" value="@Model.Price" step="0.01" min="0" />
                                </label>
                                <label for="">
                                    @Localizer["BrokenFee"]
                                    <input type="text" oninput="validateNonNegativeNumberWithTimer(this)" id="brokerFee" asp-for="BrokerFee" value="@Model.BrokerFee" step="0.01" min="0">
                                </label>
                                <input type="hidden" id="dateTimeLocal" name="dateTimeLocal" />
                                <input class="btn1" type="submit" value="@Localizer["Save"]" />
                                <button type="button" class="btn3 open-ConfirmDelete">@Localizer["ArchiveOrder"]</button>
                                <button type="button" class="btn2 open-ConfirmDelete mt-0" data-toggle="modal" data-id="@Model.Id" href="#confirmDeleteEntryModal">@Localizer["DeleteOrder"]</button>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="col-md-12" style="padding-bottom: 20px">
                    <div class="title">
                        <h1>@Localizer["VehsHeader"]</h1>
                        <button class="btn1" onclick="addVeh();">@Localizer["AddVeh"]</button>
                    </div>
                </div>
                
            </div>
        </div>
        <div id="vehiclesTableContainer">
            @await Html.PartialAsync("~/Views/PartView/Vehicles/_VehiclesTable.cshtml", Model.Vehicles)
        </div>
        @await Html.PartialAsync("~/Views/PartView/Modals/ConfirmDelete.cshtml", new ViewDataDictionary(ViewData) { {"ModalId", "confirmDeleteEntryModal"},})
    </div>

</body>


<script src="~/js/input-replacer.js"></script>
<script>
    setReplacer(document.querySelector('#iccmcC'), @ExpressionConstants.OnlyDigits);
    var delayTimer;

    function validateNonNegativeNumberWithTimer(input) {
        clearTimeout(delayTimer);

        delayTimer = setTimeout(function () { validateNonNegativeNumber(input) }, 700);
    }

    function validateNonNegativeNumber(input) {
        var value = input.value;

        if (value.startsWith("-")) {
            value = value.substring(1);
        }

        value = value.replace(',', '.');

        var numberValue = parseFloat(value).toFixed(2);

        if (isNaN(numberValue) || numberValue < 0 || numberValue.split('.')[1].length > 2) {
            input.value = '0.00';
        } else {
            input.value = numberValue;
        }
        }
</script>

<script src="~/js/auto-complite.js"></script>

<script>
    $(document).ready(function () {
        if(!$("#country-code-iso2-pickedup").val()){
            $("#country-code-iso2-pickedup").val("us")
            $("#country-code-dialcode-pickedup").val("1")
            $("#country-code-name-pickedup").val("United States")
        }
        
        if(!$("#country-code-iso2-delivery").val()){
            $("#country-code-iso2-delivery").val("us")
            $("#country-code-dialcode-delivery").val("1")
            $("#country-code-name-delivery").val("United States")
        }
        
        if(!$("#country-code-iso2-contact").val()){
            $("#country-code-iso2-contact").val("us")
            $("#country-code-dialcode-contact").val("1")
            $("#country-code-name-contact").val("United States")
        }
        
        if(!$("#country-code-iso2-fax").val()){
            $("#country-code-iso2-fax").val("us")
            $("#country-code-dialcode-fax").val("1")
            $("#country-code-name-fax").val("United States")
        }

        var phoneP = $("#phoneP");
        phoneP.intlTelInput({
            initialCountry: $("#country-code-iso2-pickedup").val() ? $("#country-code-iso2-pickedup").val() : "us",
            separateDialCode: true,
        });

        phoneP.on("countrychange", function (e, countryData) {
            $("#country-code-dialcode-pickedup").val(countryData.dialCode);
            $("#country-code-iso2-pickedup").val(countryData.iso2);
            $("#country-code-name-pickedup").val(countryData.name);
        });

        var phoneD = $("#phoneD");
        phoneD.intlTelInput({
            initialCountry: $("#country-code-iso2-delivery").val() ? $("#country-code-iso2-delivery").val() : "us",
            separateDialCode: true,
        });

        phoneD.on("countrychange", function (e, countryData) {
            $("#country-code-dialcode-delivery").val(countryData.dialCode);
            $("#country-code-iso2-delivery").val(countryData.iso2);
            $("#country-code-name-delivery").val(countryData.name);
        });
        
        var phoneC = $("#phoneC");
        phoneC.intlTelInput({
            initialCountry: $("#country-code-iso2-contact").val() ? $("#country-code-iso2-contact").val() : "us",
            separateDialCode: true,
        });

        phoneC.on("countrychange", function (e, countryData) {
            $("#country-code-dialcode-contact").val(countryData.dialCode);
            $("#country-code-iso2-contact").val(countryData.iso2);
            $("#country-code-name-contact").val(countryData.name);
        });

        var phoneFax = $("#phoneFax");
        phoneFax.intlTelInput({
            initialCountry: $("#country-code-iso2-fax").val() ? $("#country-code-iso2-fax").val() : "us",
            separateDialCode: true,
        });

        phoneFax.on("countrychange", function (e, countryData) {
            $("#country-code-dialcode-fax").val(countryData.dialCode);
            $("#country-code-iso2-fax").val(countryData.iso2);
            $("#country-code-name-fax").val(countryData.name);
        });

        document.addEventListener("input", function (event) {
            const inputElement = event.target;
            const inputId = inputElement.id;
            const index = inputId.split("_")[1];
            const apiUrl = "@Config.BaseReqvesteUrl/Dashbord/Order/";
            if (inputElement.classList.contains("carType")) {
                autocompleteHandler(inputId, `carTypeList_${index}`, apiUrl + "GetVehiclesTypes");
            } else if (inputElement.classList.contains("carMaker")) {
                const dependentInput = document.getElementById(`carType_${index}`);
                handleAutocompleteWidthDependentInput(inputId, `carMakerList_${index}`, apiUrl + "GetVehicleBrands", "&vehicleType=", dependentInput.value);
            } else if (inputElement.classList.contains("carModel")) {
                const dependentInput = document.getElementById(`carMaker_${index}`);
                handleAutocompleteWidthDependentInput(inputId, `carModelList_${index}`, apiUrl + "GetVehicleModels", "&vehicleBrand=", dependentInput.value);
            }
        });
    });
</script>

<script src="~/js/input-replacer.js"></script>
<script>
    setReplacer(document.querySelector('#contactId'), /\d/g);
    setReplacer(document.querySelector('#nameP'), /\d/g);
    setReplacer(document.querySelector('#contactNameP'), /\d/g);
    setReplacer(document.querySelector('#nameD'), /\d/g);
    setReplacer(document.querySelector('#contactD'), /\d/g);

    document.addEventListener("click", function (event) {
    const isAutocompleteItem = event.target.matches(".autocomplete-item");
    const isAutocompleteInput = event.target.matches("#carType") || event.target.matches("#carMaker") || event.target.matches("#carModel");

    if (!isAutocompleteItem && !isAutocompleteInput) {
        document.querySelectorAll(".autocomplete-list").forEach(listElement => {
            listElement.innerHTML = "";
            listElement.style.border = "none";
        });
    }
});
</script>

<style>
    .autocomplete-wrapper {
        position: relative;
    }

    .autocomplete-list {
        list-style: none;
        padding: 0;
        background-color: #fff;
        border-radius: 6px;
        max-height: 150px;
        overflow-y: auto;
        position: absolute;
        bottom: 70%;
        left: 4%;
        width: 90%;
        z-index: 1000;
    }

    .autocomplete-item {
        padding: 5px 10px;
        cursor: pointer;
    }

    .autocomplete-item:hover {
        background-color: #f0f0f0;
    }

</style>

<script>
    ConfirmRemoveEntry(GetDateTimeInFormat(new Date()), `/Dashbord/Order/ArchivedOrder`, `/Dashbord/Order/NewLoad`, '#confirmDeleteEntryModal');

    $("input[type=submit]").on('click', function (e) {
        dateInput.value = GetDateTimeInFormat(new Date());
    })
    const dateInput = document.querySelector("[name='dateTimeLocal']");

    function deleteVeh(vehId, orderId) {
        $.ajax({
            type: 'POST',
            url: '@ViewBag.BaseUrl/Dashbord/Order/RemoveVech',
            data: { vehicleId: vehId, orderId: orderId,localDate: GetDateTimeInFormat(new Date()) },
            success: function (response) {
                $("#vehiclesTableContainer").html(response);
                SuccessAlert("@Localizer["VehFormSuccessSendAndRemove"]");
            },
            error: function () {
                alert('Error occurred while removing the vehicle record.');
            }
        });
    }

    $(document).on("click", ".open-ConfirmDeleteVeh", function () {
        var vehId = $(this).data('id');

        $(".submit-add").on("click", function(){
            const orderId = document.getElementById('idOrder').value;
            deleteVeh(vehId, orderId);

            $('#confirmDeleteEntryModal').modal('hide');
        });
    });
    
    $.fn.setCursorPosition = function (pos) {
        if ($(this).get(0).setSelectionRange) {
            $(this).get(0).setSelectionRange(pos, pos);
        }
        else if ($(this).get(0).createTextRange) {
            var range = $(this).get(0).createTextRange();
            range.collapse(true);
            range.moveEnd('character', pos);
            range.moveStart('character', pos);
            range.select();
        }
    };

    $('input[name="PhoneP"], input[name="PhoneD"], input[name="PhoneC"], input[name="PhoneFax"]').on('click', function () {
        $(this).setCursorPosition(1);
    });
    
    $('input[name="ZipP"], input[name="ZipD"]').on('click', function () {
        $(this).setCursorPosition(0);
    });

     $("#vehiclesTableContainer").on("submit", ".car-form", function (el) {
            el.preventDefault();

            $("#localDateInput").val(GetDateTimeInFormat(new Date()));
            $('input[name="localDate"]').val(GetDateTimeInFormat(new Date()));

            let formElems = this.elements;
            console.log(formElems);
            let body = {
                orderId: formElems['orderIdcar'].value,
                vehicleId: formElems['vehicleId'].value,
                vin: formElems['VIN'].value,
                year: formElems['Year'].value,
                make: formElems['Make'].value,
                model: formElems['Model'].value,
                type: formElems['Type'].value,
                body: formElems['Body'].value,
                color: formElems['Color'].value,
                lotNumber: formElems['LotNumber'].value,
                localDate: formElems['localDate'].value,
            }

            $.ajax({
                type: "post",
                data: body,
                async: true,
                url: `/Dashbord/Order/SavaVech`,
                success: function (response) {
                    SuccessAlert("@Localizer["VehFormInfoSuccessSend"]")
                    console.log("Form submitted!");
                },
                error: function (response) {
                    ErrorAlert("@Localizer["VehFormHaveError"]");
                }
            });
            console.log("Form submitted!");
        });

    $(document).ready(function () {
        

        if ("@Model.CurrentStatus" != null) {
            $('#statusId option[value="@Model.CurrentStatus"]').prop('selected', true);
        }
        if ("@Model.PaymentMethod" != null) {
            $('#paymentMethod option[value="@Model.PaymentMethod"]').prop('selected', true);
        }

        $("#phoneD").mask("(999)-999-9999", { placeholder: "(XXX)-XXX-XXXX" });
        $("#phoneP").mask("(999)-999-9999", { placeholder: "(XXX)-XXX-XXXX" });
        $("#phoneC").mask("(999)-999-9999", { placeholder: "(XXX)-XXX-XXXX" });
        $("#phoneFax").mask("(999)-999-9999", { placeholder: "(XXX)-XXX-XXXX" });

        $('#stateD').val('@Model.Delivery.State').change();
        $('#stateP').val('@Model.PickedUp.State').change();

         $("#zipP").mask("99999", { placeholder: "XXXXX" });
         $("#zipD").mask("99999", { placeholder: "XXXXX" });
        
    });

    $('#zipD, #zipP, #price, #phoneD, #phoneP, #brokerFee').on('input invalid', function () {
        this.setCustomValidity('')
        if (this.validity.valueMissing) {
            this.setCustomValidity("@Localizer["ZipValidMessage"]")
        }
        if (this.validity.typeMismatch) {
            this.setCustomValidity("@Localizer["ZipValidMessage"]")
        }
        if (this.validity.patternMismatch) {
            this.setCustomValidity("@Localizer["ZipValidMessage"]")
        }
    })
    
    $('#emailD, #emailP').on('input invalid', function () {
        this.setCustomValidity('')
        if (this.validity.valueMissing) {
            this.setCustomValidity("@Localizer["EmailValidMessage"]")
        }
        if (this.validity.typeMismatch) {
            this.setCustomValidity("@Localizer["EmailValidMessage"]")
        }
        if (this.validity.patternMismatch) {
            this.setCustomValidity("@Localizer["EmailValidMessage"]")
        }
    })

    function addVeh() {
        const orderId = parseInt(document.getElementById('idOrder').value);

        
        $.ajax({
            type: "POST",
            async: true,
            url: `@ViewBag.BaseUrl/Dashbord/Order/AddVech?orderId=${orderId}`,
            processData: true,
            success: function (response) {
                $("#vehiclesTableContainer").html(response);
                SuccessAlert("@Localizer["VehFormSuccessSend"]");

                $(".car-form").submit(function (el) {
                    console.log("tyk-tyk");
                    el.preventDefault();

                    $("#localDateInput").val(GetDateTimeInFormat(new Date()));
                    $('input[name="localDate"]').val(GetDateTimeInFormat(new Date()));

                    let formElems = this.elements;
                    let body = {
                        orderId: formElems['orderIdcar'].value,
                        vehicleId: formElems['vehicleId'].value,
                        vin: formElems['VIN'].value,
                        year: formElems['Year'].value,
                        make: formElems['Make'].value,
                        model: formElems['Model'].value,
                        type: formElems['Type'].value,
                        body: formElems['Body'].value,
                        color: formElems['Color'].value,
                        lotNumber: formElems['LotNumber'].value,
                        localDate: formElems['localDate'].value,
                    }

                    $.ajax({
                        type: "post",
                        data: body,
                        async: true,
                        url: `/Dashbord/Order/SavaVech`,
                        success: function (response) {
                            SuccessAlert("@Localizer["VehFormInfoSuccessSend"]")
                        },
                        error: function (response) {
                            ErrorAlert("@Localizer["VehFormHaveError"]");
                        }
                    });
                    console.log("Form submitted!");
                });
            },
            error: function (response) {
                ErrorAlert("@Localizer["VehFormHaveError"]");
            }
        });

    };
</script>

<style>

    .intl-tel-input {
        width: 100%;
    }

    .Billing .table .td input, .Billing .table .td select {
        text-align: center;
        width: 95%;
        padding: 6px 0;
        border: 1px solid #c4c9d5;
        border-radius: 10px !important;
        background: #fff;
        margin: 0;
        font-weight: 400;
        color: #007bff;
        font-size: 20px;
    }

    table thead tr {
        background-color: #F0F4FA;
        font-weight: 700;
        font-size: 16px;
        line-height: 20px;
        color: #08112B;
    }

    table th, table td {
        text-align: center;
        padding: 7px 0 7px 0;
    }

    table.tab12 td input.delete {
        background-image:url(/img/delete.svg);
        background-size:25%;
        background-position:center;
        background-repeat:no-repeat
    }

</style>

<style>
    .btn3:hover {
        background: #686f7c;
        border: 1px solid #686f7c;
        color: #f9f9f9;
        -webkit-transition: .3s all;
        -o-transition: .3s all;
        transition: .3s all
    }

    .btn1 {
        cursor: pointer;
    }

    .btn1:hover {
        background: #f9f9f9;
        border: 1px solid #2c5deb;
        color: #2c5deb;
        -webkit-transition: .3s all;
        -o-transition: .3s all;
        transition: .3s all
    }
    /*    table.tab12 {
            width: 100%;
            border: 0px;
            border-collapse: collapse;
        }

            table.tab12 thead {
                font-weight: bold;
            }

            table.tab12 td {
                padding: 0.6rem 1rem;
                border-bottom: 1px solid #e8e9eb;
            }*/
</style>

