<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackToEquipment" xml:space="preserve">
    <value>Back to Equipment</value>
  </data>
  <data name="AddNewTruck" xml:space="preserve">
    <value>Add New Truck</value>
  </data>
  <data name="NameTruck" xml:space="preserve">
    <value>Unit</value>
  </data>
  <data name="TypeTruck" xml:space="preserve">
    <value>Unit Type</value>
  </data>
  <data name="ChooseTruckType" xml:space="preserve">
    <value>Choose a truck type</value>
  </data>
  <data name="Year" xml:space="preserve">
    <value>Year</value>
  </data>
  <data name="Make" xml:space="preserve">
    <value>Make</value>
  </data>
  <data name="Model" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>State Registered</value>
  </data>
  <data name="PlateExp" xml:space="preserve">
    <value>Plate Exp</value>
  </data>
  <data name="Vin" xml:space="preserve">
    <value>Vin</value>
  </data>
  <data name="Owner" xml:space="preserve">
    <value>Owner</value>
  </data>
  <data name="PlateTruck" xml:space="preserve">
    <value>Truck Plate</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="TruckRegistration" xml:space="preserve">
    <value>Upload Registration</value>
  </data>
  <data name="InfoMessageUploadFiles" xml:space="preserve">
    <value>You can upload files only in pdf, jpg, and jpeg (Max upload file size is 5Mb)</value>
  </data>
  <data name="SelectDoc" xml:space="preserve">
    <value>Select document</value>
  </data>
  <data name="TruckLeaseAgreement" xml:space="preserve">
    <value>Upload Lease Agreement</value>
  </data>
  <data name="TruckAnnualIns" xml:space="preserve">
    <value>Upload Annual Inspection</value>
  </data>
  <data name="BobTailPhysicalDamage" xml:space="preserve">
    <value>Upload Bobtail Physical Damage </value>
  </data>
  <data name="Optional" xml:space="preserve">
    <value>optional</value>
  </data>
  <data name="NyHut" xml:space="preserve">
    <value>Upload NY HUT</value>
  </data>
  <data name="OptionalForNyRolling" xml:space="preserve">
    <value>NY Rolling</value>
  </data>
  <data name="SaveInfo" xml:space="preserve">
    <value>Save Info</value>
  </data>
  <data name="ChooseVehicleCategory" xml:space="preserve">
    <value>Choose a vehicle type</value>
  </data>
  <data name="VehicleCategory" xml:space="preserve">
    <value>Unit Class</value>
  </data>
  <data name="ChooseTruckStatus" xml:space="preserve">
    <value>Select the status of the truck</value>
  </data>
  <data name="TruckStatus" xml:space="preserve">
    <value>Truck Status</value>
  </data>
  <data name="TruckStatusActive" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="TruckStatusBroken" xml:space="preserve">
    <value>Broken</value>
  </data>
  <data name="TruckStatusDamaged" xml:space="preserve">
    <value>Damaged</value>
  </data>
  <data name="TruckStatusDealership" xml:space="preserve">
    <value>Dealership</value>
  </data>
  <data name="TruckStatusEmergency" xml:space="preserve">
    <value>Emergency</value>
  </data>
  <data name="TruckStatusInactive" xml:space="preserve">
    <value>Inactive</value>
  </data>
  <data name="TruckStatusShop" xml:space="preserve">
    <value>Shop</value>
  </data>
  <data name="TruckStatusTowYard" xml:space="preserve">
    <value>Tow Yard</value>
  </data>
  <data name="NameTruckLabelInfo" xml:space="preserve">
    <value>Drive the Imagination with a Captivating Name</value>
  </data>
  <data name="ModelLabelInfo" xml:space="preserve">
    <value>Enter the Model Name for Your Truck</value>
  </data>
  <data name="MakeLabelInfo" xml:space="preserve">
    <value>Enter the Maker Name Behind Your Automotive Pride</value>
  </data>
  <data name="YearLabelInfo" xml:space="preserve">
    <value>Specify the Year Your Automotive Tale Unfolds</value>
  </data>
  <data name="TruckGroupSuccessAdded" xml:space="preserve">
    <value>A New Truck Group was Added</value>
  </data>
  <data name="TruckGroupNotAdded" xml:space="preserve">
    <value>Failed to add a new truck group</value>
  </data>
  <data name="ChooseGroupType" xml:space="preserve">
    <value>Choose a truck group</value>
  </data>
  <data name="CreateNewGroupType" xml:space="preserve">
    <value>Add a New Group</value>
  </data>
  <data name="VinLabelInfo" xml:space="preserve">
    <value>Enter the VIN (Vehicle Identification Number) – a 17-character code uniquely identifying the truck's make, model, year, and essential details.</value>
  </data>
  <data name="PlateTruckLabelInfo" xml:space="preserve">
    <value>Plate Truck: Enter the license plate number or registration identifier associated with the truck for accurate and efficient record-keeping.</value>
  </data>
  <data name="PlateExpLabelInfo" xml:space="preserve">
    <value>Plate Expires: Input the expiration date of the truck's license plate for timely monitoring and adherence to registration requirements.</value>
  </data>
  <data name="StateLabelInfo" xml:space="preserve">
    <value>State: Specify the state or jurisdiction where the truck is registered, providing essential location information for administrative and regulatory purposes.</value>
  </data>
  <data name="ColorLabelInfo" xml:space="preserve">
    <value>Color: Enter the primary color of the truck, providing a visual reference for identification and enhancing record accuracy.</value>
  </data>
  <data name="OwnerLabelInfo" xml:space="preserve">
    <value>Owner: Input the name or identification of the current owner of the truck, facilitating accurate ownership documentation and contact information for administrative purposes.</value>
  </data>
  <data name="TruckStatusLabelInfo" xml:space="preserve">
    <value>Truck Status: Choose the current operational condition or state of the truck from the available options, reflecting its status in the system for comprehensive tracking and management.</value>
  </data>
  <data name="GroupTruck" xml:space="preserve">
    <value>Truck Group</value>
  </data>
  <data name="TypeTruckLabelInfo" xml:space="preserve">
    <value>Type Truck: Indicate the particular category or configuration of the truck by selecting from the available options, specifying its distinctive design for effective classification and organization.</value>
  </data>
  <data name="VehicleCategoryLabelInfo" xml:space="preserve">
    <value>Vehicle Category: Indicate the general classification of the truck by selecting from provided options, defining its broad type for efficient categorization and record-keeping.</value>
  </data>
  <data name="CreateNewTruckStatus" xml:space="preserve">
    <value>Add a New Status</value>
  </data>
  <data name="TruckStatusSuccessAdded" xml:space="preserve">
    <value>A New Truck Status was Added</value>
  </data>
  <data name="TruckStatusNotAdded" xml:space="preserve">
    <value>Failed to add a new truck status</value>
  </data>
  <data name="TruckLocation" xml:space="preserve">
    <value>Add Location of the Unit</value>
  </data>
  <data name="ErrorMessageSelect" xml:space="preserve">
    <value>Please make a selection from the drop down</value>
  </data>
  <data name="AnnualIns" xml:space="preserve">
    <value>Annual Inspection Expiration Date</value>
  </data>
  <data name="TruckLocationType" xml:space="preserve">
    <value>Location Type</value>
  </data>
  <data name="GPSLocationType" xml:space="preserve">
    <value>Add GPS Location</value>
  </data>
  <data name="LaterLocationType" xml:space="preserve">
    <value>Add Location Later</value>
  </data>
  <data name="MannuallyLocationType" xml:space="preserve">
    <value>Add Location Manually</value>
  </data>
</root>