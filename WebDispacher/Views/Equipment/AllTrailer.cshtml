@using Microsoft.AspNetCore.Mvc.Localization
@using WebDispacher.ViewModels.Trailer;
@using WebDispacher.ViewModels.Truck;

@model TrailerShortVmList

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "All Trailers";
}

<link rel="stylesheet" href="~/css/Marketplace/Marketplace.css">
<body>
    <div class="admin">
        <div class="equipment">
            <div class="row">
                <div class="equipment-nav" id="fixedContent">
                    <div class="col-md-12 equipment-nav-item" style="margin-top: 30px;">
                        <div class="title" style="display: flex; justify-content: space-between">
                            <div class="title">
                                <h1>@Localizer["Header"]</h1>
                                <button class="btn1" onclick="checkAndRedirect('@Url.Action("CreateTrailer", "Equipment")');">@Localizer["AddTrailer"]</button>
                            </div>
                            <div id="widgetBlock">
                                @await Html.PartialAsync("PartView/_TrailerWidgets.cshtml", Model.Widgets)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 equipment-nav-item">
                        <form method="get" id="filterForm" action="/Equipment/Trailers">
                            <input type="hidden" asp-for="Filters.Page" value="@Model.Filters.Page" />
                            <input type="hidden" asp-for="Filters.TrailerFiltersViewModels" value="@Model.Filters.TrailerFiltersViewModels" />
                            <input type="hidden" asp-for="Filters.GroupId" value="@Model.Filters.GroupId" />
                        </form>
                    </div>
                    <div class="col-md-12 equipment-nav-item">
                        <div>
                            <div id="tabs">
                                <div class="tab" onclick="window.location.href='@Url.Action("Trucks", "Equipment")';">@Localizer["Trucks"]</div>
                                <div class="tab whiteborder" onclick="window.location.href='@Url.Action("CreateTrailer", "Equipment")';">@Localizer["Trailers"]</div>
                            </div>
                        </div>

                        <div class="sort" id="sort-block" style="margin-top: 20px;justify-content:start;gap:18px">
                            <button id="add-new-group" style="padding: 0 12px">
                                <i class="bi bi-plus" style="font-size: 28px; font-weight: 600;"></i>
                            </button>
                            @foreach (var item in Model.Filters.AvailableGroups)
                            {
                                <button data-sort-type="@item.Id">
                                    <span class="name">@item.Name</span>
                                    <span class="count-trailers">( @item.Trailers.Count() )</span>
                                </button>
                            }
                        </div>
                    </div>

                    <div class="col-md-12 equipment-nav-item under-border-block">
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="tables">
                        <div id="tabs" style="margin: 0 auto">
                            <div class="tabContent" style="margin-top: 0">
                                @foreach (var item in Model.Items)
                                {
                                    var localTrailers = item.Value;

                                    var localFilters = localTrailers == null || localTrailers.Count == 0 ? new TrailerFilterViewModel { GroupId = item.Key.Id } : Model.Filters.TrailerFiltersViewModels.FirstOrDefault(tfv => tfv.GroupId == localTrailers.First().TrailerGroupId) ?? new TrailerFilterViewModel { GroupId = item.Key.Id };
                                    <div class="table-trailer-container" id="table_block_@localFilters.GroupId" data-group-id="@localFilters.GroupId">
                                        @await Html.PartialAsync("PartView/_TrailerTable.cshtml", (item.Key, localFilters, item.Value))
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            @await Html.PartialAsync("~/Views/PartView/Modals/ConfirmDelete.cshtml", new ViewDataDictionary(ViewData) { {"ModalId", "confirmDeleteEntryModal"},})
            @await Html.PartialAsync("~/Views/PartView/Modals/ConfirmDelete.cshtml", new ViewDataDictionary(ViewData) { {"ModalId", "confirmDeleteGroupModal"}, { "ConfirmMessage", "DeleteTrailerGroup"} })
            @await Html.PartialAsync("~/Views/PartView/Modals/Equipment/RenameGroup.cshtml", new TruckGroupDropdownVm())
        </div>
    </div>
    <div id="modalTrailerGroupFormContainer"></div>
    <div id="modalCreateWidgetFormContainer"></div>
    <div id="modalEditWidgetFormContainer"></div>
</body>
<style>
    th.active-sort {
        background: #dbdbdb;
    }

    th a {
        text-decoration: none;
        color: black;
    }

    th.active-sort a {
        text-decoration: none;
        color: black;
    }

    th.active-sort i {
        color: #7b7b7b;
    }

    .value-td .badge {
        font-size: 14px;
        font-weight: 600;
        padding: 0.3rem 0.6rem 0.3rem 0.6rem;
    }

    .admin #tabs .tabContent {
        gap: 0px;
    }

    .under-border-block {
        margin-top: 20px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.15);
    }
</style>
<script>
    function updateWidgets() {
        $.ajax({
            url: '@Url.Action("GetTrailerWidgetsInCompany", "Equipment")',
            type: 'GET',
            success: function (result) {
                $("#widgetBlock").html(result);
            },
            error: function () {
            }
        });
    }

    window.addEventListener('DOMContentLoaded', function () {
        synchronizeWidth();

        window.addEventListener('resize', synchronizeWidth);
    });

    function synchronizeWidth() {
        var elements = document.getElementsByClassName('tables');

        for (var i = 0; i < elements.length; i++) {
            var parentElement = elements[i].parentElement;

            if (parentElement && parentElement.classList.contains('parentClass')) {
                var referenceElement = elements[i];

                var targetElement = document.getElementById('targetElement');

                if (referenceElement && targetElement) {
                    targetElement.style.width = getComputedStyle(referenceElement).width;
                }
                break;
            }
        }
    }

    function ConfirmRemoveWidgetEntry(id) {
        var body = {
            id: id,
        };

        $.ajax({
            type: "post",
            async: true,
            data: body,
            url: '@Url.Action("RemoveTrailerWidget", "Equipment")',
            dataType: 'json',
            success: function (result) {
                if (result) {
                    updateWidgets();
                    SuccessAlert('@Localizer["MessageSuccessRemoveTrailerWidget"]');
                } else {
                    WarningAlert('@Localizer["MessageErrorRemoveTrailerWidget"]');
                }
                $('#editWidget').modal('hide');
            },
            error: function (result) {
                ErrorAlert('@Localizer["MessageErrorRequestRemoveTrailerWidget"]');
                $('#editWidget').modal('hide');
            },
        });
    }

    document.addEventListener("DOMContentLoaded", adjustPadding);

    function adjustPadding() {
        var container = document.getElementById("sort-block");
        var buttons = container.querySelectorAll("button[data-sort-type]");
        var addButton = document.getElementById("add-new-group");
        var containerWidth = container.offsetWidth;
        if (containerWidth >= 995) {
            var baseFontSize = 14;
            var minFontSize = 12;
            var maxFontSize = 14;
            var maxPadding = 14;
            var minPadding = 8;
            buttons.forEach(function (button) {
                button.style.padding = "10px " + maxPadding + "px";
                button.style.fontSize = baseFontSize + "px";
            });
            function allButtonsFit() {
                var totalWidth = addButton.offsetWidth
                buttons.forEach(function (button) {
                    totalWidth += button.offsetWidth;
                });
                totalWidth += buttons.length * 18;
                console.log(totalWidth);
                console.log(totalWidth <= containerWidth);
                return totalWidth <= containerWidth;
            }
            while (!allButtonsFit() && (maxFontSize >= minFontSize || maxPadding >= minPadding)) {
                if (maxPadding >= minPadding) {
                    maxPadding--;
                } else if (maxFontSize >= minFontSize) {
                    maxFontSize--;
                    maxPadding = 14;
                }

                buttons.forEach(function (button) {
                    button.style.padding = "10px " + Math.max(minPadding, maxPadding) + "px";
                    button.style.fontSize = Math.max(minFontSize, maxFontSize) + "px";
                });
            }
        }
    }

    $(document).ready(function () {
        ShowAlert();
    });

    const sortButtons = document.querySelectorAll('button[data-sort-type]');

    sortButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetElementId = 'Table_' + button.getAttribute('data-sort-type');
            const targetElement = document.getElementById(targetElementId);

            if (targetElement) {
                const fixedContentHeight = document.getElementById('fixedContent').offsetHeight;
                const targetElementTop = targetElement.getBoundingClientRect().top + window.scrollY;

                const offset = targetElementTop - fixedContentHeight;

                $("html, body").animate({ scrollTop: offset }, 500);
            }
        });
        });

        ConfirmRemoveEntryTrailer(GetDateTimeInFormat(new Date()), `/Equipment/Trailer/Remove`, `/Equipment/Trailers`, '#confirmDeleteEntryModal');
        ConfirmRemoveGroupEntry(GetDateTimeInFormat(new Date()), `/Equipment/TrailerGroup/Remove`, `/Equipment/Trailers`, '#confirmDeleteGroupModal');
        ConfirmRenameGroupEntry(GetDateTimeInFormat(new Date()), `/Equipment/TrailerGroup/Rename`, `/Equipment/Trailers`, '#renameGroup');

        $(document).on("click", "#add-new-group", function () {
            var returnUrl = '@Context.Request.Path' + '@Context.Request.QueryString';
            var modalContainer = $('#modalTrailerGroupFormContainer');

            if (modalContainer.length === 0 || modalContainer.html().trim() === '') {
                modalContainer.load('@Url.Action("GetCreateTrailerGroupForm", "Equipment")?returnUrl=' + encodeURIComponent(returnUrl), function () {
                    $("#addFirstGroup").modal('show');
                });
            }
            else {
                $("#addFirstGroup").modal('show');
            }
        });

        function checkAndRedirect(url) {
            var returnUrl = '@Context.Request.Path' + '@Context.Request.QueryString';
            var modalContainer = $('#modalTrailerGroupFormContainer');

            $.ajax({
                url: '@Url.Action("IsHaveTrailerGroup", "Equipment")',
                type: 'POST',
                data: {
                },
                success: function (result) {
                    if (result.canProceed) {
                        window.location.href = url;
                    } else {
                        if (modalContainer.length === 0 || modalContainer.html().trim() === '') {
                            modalContainer.load('@Url.Action("GetCreateTrailerGroupForm", "Equipment")?returnUrl=' + encodeURIComponent(returnUrl), function () {
                                $("#addFirstGroup").modal('show');
                            });
                        }
                        else {
                            $("#addFirstGroup").modal('show');
                        }
                    }
                },
                error: function () {
                    console.error("Ошибка при выполнении запроса на сервер.");
                }
            });
        }

        function ConfirmRemoveGroupEntry(actualDate, requestUrl, responseUrl, modalSelector) {
            $(document).on("click", ".open-RemoveGroup", function () {
                var entryId = $(this).data('id');
                var modalSelectorr = $($(this).data('modal-selector'));
                modalSelectorr.off("click", "#remove-entry-button");

                modalSelectorr.on("click", "#remove-entry-button", function () {
                    var body = {
                        id: entryId,
                        localDate: actualDate,
                    };

                    var currentModalSelector = modalSelector;
                    $.ajax({
                        type: "get",
                        async: true,
                        data: body,
                        url: requestUrl,
                        dataType: 'json',
                        success: function (result) {
                            if (result) {
                                SuccessAlert('@Localizer["MessageSuccessRemoveGroup"]');
                                var currentGroup = "@Model.Filters.GroupId";
                                if (currentGroup === `${entryId}`) {
                                    document.querySelector('#filterForm input[name="Filters.GroupId"]').value = 0;
                                    document.getElementById('filterForm').submit();
                                }
                                else {
                                    var buttonToChange = $(`#sort-block button[data-sort-type="${entryId}"]`);

                                    if (buttonToChange.length > 0) {
                                        buttonToChange.remove();
                                    }

                                    var block = $("#table_block_" + entryId).remove();
                                }
                            } else {
                                WarningAlert('@Localizer["MessageErrorRemoveGroup"]');
                            }
                            $(currentModalSelector).modal('hide');
                        },
                        error: function (result) {
                            ErrorAlert('@Localizer["MessageErrorRequestRemoveGroup"]');
                            $(currentModalSelector).modal('hide');
                        },
                    });
                });
            });
        }

        function ConfirmRenameGroupEntry(actualDate, requestUrl, responseUrl, modalSelector) {
            $(document).on("click", ".open-RenameGroup", function () {
                var entryId = $(this).data('id');
                var groupName = $(this).data('group-name');

                document.getElementById('groupId').value = entryId;
                document.getElementById('groupName').value = groupName;
            });

            $('#renameGroup').on('submit', function (event) {
                event.preventDefault();

                $.ajax({
                    type: "get",
                    async: true,
                    data: $('#renameGroup form').serialize(),
                    url: requestUrl,
                    dataType: 'json',
                    success: function (result) {
                        var entryId = document.getElementById('groupId').value;
                        var newGroupName = document.getElementById('groupName').value;
                        if (result) {
                            SuccessAlert('@Localizer["MessageSuccessRenameGroup"]');

                            var buttonToChange = $(`#sort-block button[data-sort-type="${entryId}"]`);

                            if (buttonToChange.length > 0) {
                                buttonToChange.find('.name').text(newGroupName);
                            }

                            var blockId = `table_block_${entryId}`;
                            var upArrowIcon = $('#' + blockId + ' i.bi-caret-up-fill');
                            var downArrowIcon = $('#' + blockId + ' i.bi-caret-down-fill');

                            let filter;

                            if (upArrowIcon.length > 0) {
                                filter = upArrowIcon;
                            } else if (downArrowIcon.length > 0) {
                                filter = downArrowIcon;
                            }

                            if (filter !== undefined && filter.length > 0) {

                                var aElement = filter.closest('th').find('a');
                                var currentSortField = aElement.data('sortfield');

                                var currentSortType = aElement.data('sorttype');

                                currentSortType = (currentSortType === 'Ascending') ? 'Descending' : 'Ascending';

                                var url = '@Url.Action("GetTrailersInGroupByFilters", "Equipment")' + '?groupId=' + entryId + '&sortField=' + currentSortField + ' &sortType=' + currentSortType;

                                $.get(url, function (data) {
                                    $('#tabs .tabContent #table_block_' + entryId).html(data);

                                    $('#Table_' + entryId + ' th').removeClass('active - sort asc desc').find('i').remove();

                                    var thElement = $('#Table_' + entryId + ' a[data-sortfield="' + currentSortField + '"]').closest('th');

                                    if (currentSortType === 'Ascending') {
                                        thElement.append('<i class="bi bi-caret-down-fill"></i>');
                                    } else {
                                        thElement.append('<i class="bi bi-caret-up-fill"></i>');
                                    }

                                    thElement.addClass('active-sort ' + currentSortType);
                                });
                            }
                            else {
                                var url = '@Url.Action("GetTrailersInGroupByFilters", "Equipment")' + '?groupId=' + entryId;

                                $.get(url, function (data) {
                                    $('#tabs .tabContent #table_block_' + entryId).html(data);

                                    $('#Table_' + entryId + ' th').removeClass('active - sort asc desc').find('i').remove();
                                });
                            }
                        } else {
                            WarningAlert('@Localizer["MessageErrorRenameGroup"]');
                        }
                        $(modalSelector).modal('hide');
                    },
                    error: function (result) {
                        ErrorAlert('@Localizer["MessageErrorRequestRenameGroup"]');
                        $(modalSelector).modal('hide');
                    },
                });
            });
        }

        function ConfirmRemoveEntryTrailer(actualDate, requestUrl, responseUrl, modalSelector) {
            $(document).on("click", ".open-RemoveTrailer", function () {
                var entryId = $(this).data('id');
                var modalSelectorr = $($(this).data('modal-selector'));
                var blockId = $(this).closest('.table-trailer-container').attr('data-group-id');

                modalSelectorr.off("click", "#remove-entry-button");

                modalSelectorr.on("click", "#remove-entry-button", function () {
                    var body = {
                        id: entryId,
                        localDate: actualDate,
                    };

                    $.ajax({
                        type: "post",
                        async: true,
                        data: body,
                        url: requestUrl,
                        success: function (result) {
                            if (result) {
                                SuccessAlert('@Localizer["MessageSuccessRemoveTrailer"]');

                                var upArrowIcon = $('#table_block_' + blockId + ' i.bi-caret-up-fill');

                                var downArrowIcon = $('#table_block_' + blockId + ' i.bi-caret-down-fill');

                                let filter;

                                if (upArrowIcon.length > 0) {
                                    filter = upArrowIcon;
                                } else if (downArrowIcon.length > 0) {
                                    filter = downArrowIcon;
                                }


                                if (filter !== undefined && filter.length > 0) {

                                    var aElement = filter.closest('th').find('a');

                                    var currentSortField = aElement.data('sortfield');

                                    var currentSortType = aElement.data('sorttype');

                                    currentSortType = (currentSortType === 'Ascending') ? 'Descending' : 'Ascending';

                                    var url = '@Url.Action("GetTrailersInGroupByFilters", "Equipment")' + '?groupId=' + blockId + '&sortField=' + currentSortField + ' &sortType=' + currentSortType;

                                    $.get(url, function (data) {
                                        $('#tabs .tabContent #table_block_' + blockId).html(data);

                                        $('#Table_' + blockId + ' th').removeClass('active - sort asc desc').find('i').remove();

                                        var thElement = $('#Table_' + blockId + ' a[data-sortfield="' + currentSortField + '"]').closest('th');

                                        if (currentSortType === 'Ascending') {
                                            thElement.append('<i class="bi bi-caret-down-fill"></i>');
                                        } else {
                                            thElement.append('<i class="bi bi-caret-up-fill"></i>');
                                        }

                                        thElement.addClass('active-sort ' + currentSortType);
                                        var buttonToChange = $(`#sort-block button[data-sort-type="${blockId}"]`);

                                        if (buttonToChange.length > 0) {
                                            buttonToChange.find('.count-trailers').text('( ' + $('#tabs .tabContent #table_block_' + blockId + ' tbody tr').length + ' )');
                                        }
                                    });
                                }
                                else {
                                    var url = '@Url.Action("GetTrailersInGroupByFilters", "Equipment")' + '?groupId=' + blockId;

                                    $.get(url, function (data) {
                                        $('#tabs .tabContent #table_block_' + blockId).html(data);

                                        $('#Table_' + blockId + ' th').removeClass('active - sort asc desc').find('i').remove();

                                        var buttonToChange = $(`#sort-block button[data-sort-type="${blockId}"]`);

                                        if (buttonToChange.length > 0) {
                                            buttonToChange.find('.count-trailers').text('( ' + $('#tabs .tabContent #table_block_' + blockId + ' tbody tr').length + ' )');
                                        }
                                    });
                                }
                            }
                            else {
                                WarningAlert('@Localizer["MessageErrorRemoveTrailer"]');
                            }
                        },
                        error: function () {
                            ErrorAlert('@Localizer["MessageErrorRequestRemoveTrailer"]');
                        }
                    });

                    $(modalSelectorr).modal('hide');
                });
            });
        }
</script>

<script>
    async function convertToSelect(index) {
        var textElement = document.getElementById('container-click-trailer-status-' + index);
        var selectContainer = document.getElementById('select-container-trailer-status-' + index);
        var selectElement = document.getElementById('select-trailer-status-' + index);

        textElement.style.display = 'none';
        selectElement.style.display = 'inline-block';

        document.addEventListener('click', clickOutsideHandler);

        try {
            var response = await fetch('@Url.Action("GetTrailerStatusDropdownItems", "Equipment")');
            var data = await response.json();

            data.forEach(function (item) {
                var option = document.createElement('option');
                option.value = item.id;
                option.text = item.name;
                selectElement.appendChild(option);
            });

            var selectedValue = textElement.innerText;
            if (selectedValue) {
                var matchingOption = Array.from(selectElement.options).find(option => option.text === selectedValue);

                if (matchingOption) {
                    matchingOption.selected = true;
                }
            }
        } catch (error) {
        }
    }

    function clickOutsideHandler(event) {
        var target = event.target;

        if (!target.closest('.select-container')) {
            var selectContainers = document.querySelectorAll('.select-container select');

            selectContainers.forEach(function (select) {
                while (select.options.length > 0) {
                    select.remove(0);
                }
            });

            selectContainers.forEach(function (container) {
                container.style.display = 'none';
            });

            var textElements = document.querySelectorAll('.value-td .badge');

            textElements.forEach(function (textElement) {
                textElement.style.display = 'inline-block';
            });

            document.removeEventListener('click', clickOutsideHandler);
        }
    }

    async function convertLocationToInput(index) {
        var textElement = document.getElementById('container-click-trailer-location-' + index);
        var selectContainer = document.getElementById('input-trailer-location-container-' + index);
        var selectElement = document.getElementById('input-trailer-location-' + index);

        textElement.style.display = 'none';
        selectContainer.style.display = 'flex';

        document.addEventListener('click', clickOutsideInputLocationHandler);
    }

    function clickOutsideInputLocationHandler(event) {
        var target = event.target;

        if (!target.closest('.input-location-container')) {
            var selectContainers = document.querySelectorAll('.input-location-container');

            selectContainers.forEach(function (container) {
                container.style.display = 'none';
            });

            var textElements = document.querySelectorAll('.value-td .panel-control');

            textElements.forEach(function (textElement) {
                textElement.style.display = 'flex';
            });

            document.removeEventListener('click', clickOutsideInputLocationHandler);
        }
    }

    function submitForm(index) {
        var textElement = document.getElementById('container-click-trailer-status-' + index);
        var selectElement = document.getElementById('select-trailer-status-' + index);
        var selectContainer = document.getElementById('select-container-trailer-status-' + index);

        var selectedValue = selectElement.value;
        var blockId = $(textElement).closest('.table-trailer-container').attr('data-group-id');

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveTrailerStatus", "Equipment")',
            data: {
                trailerId: index,
                trailerStatusId: selectedValue
            },
            success: function (response) {
                if (response) {
                    SuccessAlert('@Localizer["MessageSuccessChangeStatus"]');

                    var upArrowIcon = $('#table_block_' + blockId + ' i.bi-caret-up-fill');

                    var downArrowIcon = $('#table_block_' + blockId + ' i.bi-caret-down-fill');

                    let filter;

                    if (upArrowIcon.length > 0) {
                        filter = upArrowIcon;
                    } else if (downArrowIcon.length > 0) {
                        filter = downArrowIcon;
                    }

                    if (filter !== undefined && filter.length > 0) {

                        var aElement = filter.closest('th').find('a');

                        var currentSortField = aElement.data('sortfield');

                        var currentSortType = aElement.data('sorttype');

                        currentSortType = (currentSortType === 'Ascending') ? 'Descending' : 'Ascending';

                        var url = '@Url.Action("GetTrailersInGroupByFilters", "Equipment")' + '?groupId=' + blockId + '&sortField=' + currentSortField + ' &sortType=' + currentSortType;

                        $.get(url, function (data) {
                            $('#tabs .tabContent #table_block_' + blockId).html(data);

                            $('#Table_' + blockId + ' th').removeClass('active - sort asc desc').find('i').remove();

                            var thElement = $('#Table_' + blockId + ' a[data-sortfield="' + currentSortField + '"]').closest('th');

                            if (currentSortType === 'Ascending') {
                                thElement.append('<i class="bi bi-caret-down-fill"></i>');
                            } else {
                                thElement.append('<i class="bi bi-caret-up-fill"></i>');
                            }

                            thElement.addClass('active-sort ' + currentSortType);
                        });
                    }
                    else {
                        var url = '@Url.Action("GetTrailersInGroupByFilters", "Equipment")' + '?groupId=' + blockId;

                        $.get(url, function (data) {
                            $('#tabs .tabContent #table_block_' + blockId).html(data);

                            $('#Table_' + blockId + ' th').removeClass('active - sort asc desc').find('i').remove();
                        });
                    }

                    updateWidgets();
                }
                else {
                    WarningAlert('@Localizer["MessageErrorChangeStatus"]');
                }
            },
            error: function (error) {
            }
        });
    }

    function submitTrailerLocationForm(index) {
        var textElement = document.getElementById('container-click-trailer-location-' + index);
        var selectElement = document.getElementById('input-trailer-location-' + index);
        var selectContainer = document.getElementById('input-trailer-location-container-' + index);

        var selectedValue = selectElement.value;
        var blockId = $(textElement).closest('.table-trailer-container').attr('data-group-id');

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveTrailerLocation", "Equipment")',
            data: {
                trailerId: index,
                trailerLocation: selectedValue
            },
            success: function (response) {
                if (response) {
                    SuccessAlert('@Localizer["MessageSuccessChangeLocation"]');

                    var upArrowIcon = $('#table_block_' + blockId + ' i.bi-caret-up-fill');

                    var downArrowIcon = $('#table_block_' + blockId + ' i.bi-caret-down-fill');

                    let filter;

                    if (upArrowIcon.length > 0) {
                        filter = upArrowIcon;
                    } else if (downArrowIcon.length > 0) {
                        filter = downArrowIcon;
                    }

                    if (filter !== undefined && filter.length > 0) {

                        var aElement = filter.closest('th').find('a');

                        var currentSortField = aElement.data('sortfield');

                        var currentSortType = aElement.data('sorttype');

                        currentSortType = (currentSortType === 'Ascending') ? 'Descending' : 'Ascending';

                        var url = '@Url.Action("GetTrailersInGroupByFilters", "Equipment")' + '?groupId=' + blockId + '&sortField=' + currentSortField + ' &sortType=' + currentSortType;

                        $.get(url, function (data) {
                            $('#tabs .tabContent #table_block_' + blockId).html(data);

                            $('#Table_' + blockId + ' th').removeClass('active - sort asc desc').find('i').remove();

                            var thElement = $('#Table_' + blockId + ' a[data-sortfield="' + currentSortField + '"]').closest('th');

                            if (currentSortType === 'Ascending') {
                                thElement.append('<i class="bi bi-caret-down-fill"></i>');
                            } else {
                                thElement.append('<i class="bi bi-caret-up-fill"></i>');
                            }

                            thElement.addClass('active-sort ' + currentSortType);
                        });
                    }
                    else {
                        var url = '@Url.Action("GetTrailersInGroupByFilters", "Equipment")' + '?groupId=' + blockId;

                        $.get(url, function (data) {
                            $('#tabs .tabContent #table_block_' + blockId).html(data);

                            $('#Table_' + blockId + ' th').removeClass('active - sort asc desc').find('i').remove();
                        });
                    }
                }
                else {
                    WarningAlert('@Localizer["MessageErrorChangeLocation"]');
                }
            },
            error: function (error) {
            }
        });
    }
</script>

<style>
    th.active-sort {
        background: #dbdbdb;
    }

    th a {
        text-decoration: none;
        color: black;
    }

    th.active-sort a {
        text-decoration: none;
        color: black;
    }

    th.active-sort i {
        color: #7b7b7b;
    }

    .value-td .badge {
        font-size: 14px;
        font-weight: 600;
        padding: 0.3rem 0.6rem 0.3rem 0.6rem;
    }
</style>
<style>
    img {
        float: left;
    }
</style>