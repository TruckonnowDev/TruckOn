@using Microsoft.AspNetCore.Mvc.Localization
@using WebDispacher.Constants;

@model WebDispacher.ViewModels.Contact.ContactViewModel

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Create Contact";
}
<link rel="stylesheet" href="~/libs/intl-tel-input-master/css/intlTelInput.css">
<script src="~/libs/intl-tel-input-master/js/intlTelInput.js"></script>
<body>
    <div class="admin">
        <div class="container">
            <div class="row">
                <div class="col-md-5">
                    <div class="tabContent">
                        <h2>@Localizer["InfoAboutContact"]</h2>
                        <form action="" method="post">
                            <div class="validation" asp-validation-summary="ModelOnly"></div>
                            <label for="">
                                <label class="mb-0" asp-for="Name">
                                    @Html.DisplayNameFor(model => model.Name)
                                    <span><abbr data-title="@Localizer["NameLabelInfo"]"><i class="bi bi-info-circle"></i></abbr></span>
                                </label>
                                <input type="text" id="name" name="Name" required>
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </label>
                            <label for="">
                                <label class="mb-0" asp-for="Position">
                                    @Html.DisplayNameFor(model => model.Position)
                                    <span><abbr data-title="@Localizer["PositionLabelInfo"]"><i class="bi bi-info-circle"></i></abbr></span>
                                </label>
                                <input type="text" name="Position" id="position">
                                @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
                            </label>
                            <label for="">
                                <label class="mb-0" asp-for="Email">
                                    @Html.DisplayNameFor(model => model.Email)
                                    <span><abbr data-title="@Localizer["EmailLabelInfo"]"><i class="bi bi-info-circle"></i></abbr></span>
                                </label>
                                <input type="email" id="email" name="Email" pattern="@PatternConstants.Email" required>
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </label>
                            <div style="width:500px">
                                <div style="display:flex;justify-content:space-between;">
                                    <div class="elem" style="width: 75%">
                                        <label class="mb-0" asp-for="PhoneNumber.Number" style="width:100%;">
                                            @Html.DisplayNameFor(model => model.PhoneNumber.Number)
                                            <span><abbr data-title="@Localizer["PhoneNumberLabelInfo"]"><i class="bi bi-info-circle"></i></abbr></span>
                                        </label>
                                        <label for="" style="width:100%">
                                            <input type="text" id="phoneC" asp-for="PhoneNumber.Number" pattern="@PatternConstants.PhoneNumberWithoutCountryCode" placeholder="(XXX)-XXX-XXXX" required>
                                            <input type="hidden" id="country-code-dialcode" asp-for="PhoneNumber.DialCode">
                                            <input type="hidden" id="country-code-iso2" asp-for="PhoneNumber.Iso2">
                                            <input type="hidden" id="country-code-name" asp-for="PhoneNumber.Name">
                                        </label>
                                    </div>
                                    <div class="elem" style="width: 20%">
                                        <label class="mb-0" asp-for="Ext" style="width:100%;"></label>
                                        <label for="" style="width:100%">
                                            <input type="text" name="Ext" id="Ext" class="mt-0" maxlength="5"  required/>
                                        </label>
                                        
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                            </div> 
                            <input type="hidden" value="" name="localDate" />
                            <input class="btn1" type="submit" value="@Localizer["Save"]" />
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

<style>
    .intl-tel-input {
        width: 100%;
    }
</style>


<script src="~/js/input-replacer.js"></script>
<script>

    setReplacer(document.querySelector('#name'), @ExpressionConstants.OnlyLetters);

    $.fn.setCursorPosition = function (pos) {
        if ($(this).get(0).setSelectionRange) {
            $(this).get(0).setSelectionRange(pos, pos);
        }
        else if ($(this).get(0).createTextRange) {
            var range = $(this).get(0).createTextRange();
            range.collapse(true);
            range.moveEnd('character', pos);
            range.moveStart('character', pos);
            range.select();
        }
    };

    $('input[name="PhoneNumber.Number"]').on('click', function () {
        $(this).setCursorPosition(1);
    });

    $('#phone').on('input invalid', function () {
        this.setCustomValidity('')
        if (this.validity.valueMissing) {
            this.setCustomValidity("@Localizer["PhoneValidMessage"]")
        }
        if (this.validity.typeMismatch) {
            this.setCustomValidity("@Localizer["PhoneValidMessage"]")
        } 
        if (this.validity.patternMismatch) {
            this.setCustomValidity("@Localizer["PhoneValidMessage"]")
        } 
    })

    $('#email').on('input invalid', function () {
        this.setCustomValidity('')
        if (this.validity.valueMissing) {
            this.setCustomValidity("@Localizer["EmailValidMessage"]")
        }
        if (this.validity.typeMismatch) {
            this.setCustomValidity("@Localizer["EmailValidMessage"]")
        }
        if (this.validity.patternMismatch) {
            this.setCustomValidity("@Localizer["EmailValidMessage"]")
        }
    })

    const dateInput = document.querySelector("[name='localDate']");

    $("input[type=submit]").on('click', function (e) {
        dateInput.value = GetDateTimeInFormat(new Date());
    })

    $(document).ready(function () {
        $("#phoneC").mask("(999)-999-9999", { placeholder: "(XXX)-XXX-XXXX" });

        if(!$("#country-code-iso2").val()){
            $("#country-code-iso2").val("us");
            $("#country-code-dialcode").val("1");
            $("#country-code-name").val("United States");
        };

        var phone = $("#phoneC");
        phone.intlTelInput({
            initialCountry: $("#country-code-iso2").val() ? $("#country-code-iso2").val() : "us",
            separateDialCode: true,
        });

        phone.on("countrychange", function (e, countryData) {
            $("#country-code-dialcode").val(countryData.dialCode);
            $("#country-code-iso2").val(countryData.iso2);
            $("#country-code-name").val(countryData.name);
        });
    });
</script>