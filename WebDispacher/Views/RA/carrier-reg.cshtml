@using WebDispacher.Constants;
@using Microsoft.AspNetCore.Mvc.Localization

@model WebDispacher.ViewModels.RA.Carrier.Registration.PersonalDataViewModel

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Carrier Registration";
}
<link href="~/css/Auth/login.css" rel="stylesheet" type="text/css" />
<body>
    <div class="register-page">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-6 pl-4">
                    <div class="left-text">
                        <h1>@Localizer["BlockHeader"]</h1>
                        <p>@Localizer["BodyFirstPart"]</p>
                        <p>@Localizer["BodySecondPart"]</p>
                        <div class="info">
                            @* <a href=""><img src="img/message-circle.svg" alt=""> Support Chat</a> *@
                            <a href="tel:+1 (773) 420 4444"><img src="img/phone-call.svg" alt=""> +1 (773) 420-4444</a>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 pl-4">
                    <div class="right-form">
                        <form action="" method="post">
                            
                            <h3>@Localizer["Step1of3"]</h3>
                            <ul class="steps">
                                <li class="active"></li>
                                <li></li>
                                <li></li>
                            </ul>
                            <div class="step">
                                <div class="validation" asp-validation-summary="ModelOnly"></div>
                                @Html.ValidationSummary()
                                <label for="">
                                    @Html.DisplayNameFor(x => x.Email)
                                    <div class="mt-2">
                                        <input type="email" pattern="@PatternConstants.Email" id="address" name="Email" value="@Model.Email" placeholder="" required>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </label>
                                <label for="">
                                    @Html.DisplayNameFor(x => x.Password)
                                    <div class="d-flex align-items-center mt-2 hidden-password">
                                        <input type="password" id="password-input" name="Password" value="@Model.Password" placeholder="" required>
                                        <a href="#" class="password-control" onclick="return show_hide_password(this, 'password-input');"></a>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                </label>
                                <label for="">
                                    @Html.DisplayNameFor(x => x.FirstName)
                                    <div class="mt-2">
                                        <input type="text" id="firstName" pattern="@PatternConstants.OnlyLetters" name="FirstName" value="@Model.FirstName" placeholder="" required>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                </label>
                                <label for="">
                                    @Html.DisplayNameFor(x => x.LastName)
                                    <div class="mt-2">
                                        <input type="text" id="lastName" pattern="@PatternConstants.OnlyLetters" name="LastName" value="@Model.LastName" placeholder="" required>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                </label>
                                <label for="">
                                    @Html.DisplayNameFor(x => x.USDOTNumber)
                                    <div class="mt-2">
                                        <input type="text" id="usdot" name="USDOTNumber" value="@((Model.USDOTNumber == 0) ? string.Empty : Model.USDOTNumber.ToString())" placeholder="" required>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.USDOTNumber, "", new { @class = "text-danger" })
                                </label>
                                <label for="">
                                    @Html.DisplayNameFor(x => x.CompanyName)
                                    <div class="mt-2">
                                        <input type="text" id="companyName" name="CompanyName" value="@Model.CompanyName" placeholder="" required>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                                </label>
                                <label for="">
                                    @Html.DisplayNameFor(x => x.Number)
                                        <input style="position: relative; z-index: 0" type="text" id="phoneD" asp-for="Number" pattern="@PatternConstants.PhoneNumberWithoutCountryCode" placeholder="(XXX)-XXX-XXXX" required>
                                        <input type="hidden" id="country-code-dialcode" asp-for="DialCode">
                                        <input type="hidden" id="country-code-iso2" asp-for="Iso2">
                                        <input type="hidden" id="country-code-name" asp-for="Name">
                                    @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
                                </label>
                                <input class="btn1-big" type="submit" value="@Localizer["Next"]" />
                                <div class="term-message">
                                    <div class="terms">
                                        <p>
                                            @Localizer["FirstPartAgreements"] <a href="">@Localizer["SecondPartAgreements"]</a> @Localizer["And"] <a href="">@Localizer["ThirdPartAgreements"]</a>
                                        </p>
                                    </div>
                                </div>


                                @*<h3>USDOT</h3>
                                <label for=""><input type="text"></label>
                                <p>USDOT +1 (773) 420-4444</p>
                                <input type="submit" value="@Localizer["Verify"]" class="btn1-big">*@
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>

<script src="~/js/input-replacer.js"></script>
<script>
    setReplacer(document.querySelector('#firstName'), /\d/g);
    setReplacer(document.querySelector('#lastName'), /\d/g);
    setReplacer(document.querySelector('#usdot'), @ExpressionConstants.OnlyDigits);

    $('#phoneD').on('input invalid', function () {
        this.setCustomValidity('')
        if (this.validity.valueMissing) {
            this.setCustomValidity("@Localizer["OnlyNumbersValidMessage"]")
        }
        if (this.validity.typeMismatch) {
            this.setCustomValidity("@Localizer["OnlyNumbersValidMessage"]")
        }
        if (this.validity.patternMismatch) {
            this.setCustomValidity("@Localizer["OnlyNumbersValidMessage"]")
        }
    })

     $('#firstName, #lastName').on('input invalid', function () {
        this.setCustomValidity('')
        if (this.validity.valueMissing) {
            this.setCustomValidity("@Localizer["OnlyLettersValidMessage"]")
        }
        if (this.validity.typeMismatch) {
            this.setCustomValidity("@Localizer["OnlyLettersValidMessage"]")
        }
        if (this.validity.patternMismatch) {
            this.setCustomValidity("@Localizer["OnlyLettersValidMessage"]")
        }
    })

    $(document).ready(function () {
        $("#phoneD").mask("(999)-999-9999", { placeholder: "(XXX)-XXX-XXXX" });

         if(!$("#country-code-iso2").val()){
            $("#country-code-iso2").val("us")
            $("#country-code-dialcode").val("1")
            $("#country-code-name").val("United States")
        }

        var phoneD = $("#phoneD");
        phoneD.intlTelInput({
            initialCountry: $("#country-code-iso2").val() ? $("#country-code-iso2").val() : "us",
            separateDialCode: true,
        });

        phoneD.on("countrychange", function (e, countryData) {
            $("#country-code-dialcode").val(countryData.dialCode);
            $("#country-code-iso2").val(countryData.iso2);
            $("#country-code-name").val(countryData.name);
        });
    });


</script>

<style>
    .term-message .terms p {
        color: gray !important;
    }
</style>