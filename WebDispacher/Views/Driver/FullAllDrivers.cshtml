@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization;
@using WebDispacher.Constants;
@using WebDispacher.ViewModels.Driver;

@model DriverVmList

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "All Drivers";
}

<body>
    <div class="admin">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="title" style="display: flex; justify-content: space-between;margin-top:60px">
                        <div class="title" style="margin-top: 0px">
                            <h1>@Localizer["Drivers"]</h1>
                            <button class="btn1 btn1-custom" onclick="window.location.href='@Url.Action("CreateDriver", "Driver")';">@Localizer["AddDriver"]</button>
                            <div style="margin-left:20px;vertical-align: middle;display: flex;align-items: center;" class="btn1 btn1-custom" id="addEmail" data-toggle="modal" data-modal-selector="#createEmail" onclick="setEmailProperty('0')" href="#createEmail">@Localizer["AddEmailAll"]</div>
                        </div>
                        <button class="btn1 btn1-custom" onclick="window.location.href='@Url.Action("GetDriverAllEmails", "Driver")';">@Localizer["AllEmailMessage"]</button>
                    </div>
                    <form method="get" id="searchForm">
                        <div class="card border card-body" style="display: flex;flex-direction: row;">
                            <div class="item-search">
                                <label>
                                    @Localizer["LastName"]
                                    <input class="type-button" id="search-last-name-driver" placeholder="@Localizer["LastNameLabel"]" asp-for="Filters.LastName" type="text" maxlength="20">
                                </label>
                            </div>
                            <div class="item-search">
                                <label>
                                    @Localizer["FirstName"]
                                    <input class="type-button" id="search-first-name-driver" placeholder="@Localizer["FirstNameLabel"]" asp-for="Filters.FirstName"  type="text" maxlength="20">
                                </label>
                            </div>
                            <div class="item-search item-search-button">
                                <button type="submit" class="btn1 btn-modal">@Localizer["Search"]</button>
                            </div>
                        </div>
                        <div class="col-md-12 pl-0 pr-0">
                            <div id="sorts" class="sort-group">
                                @foreach (var item in Model.Filters.AvailableFirstLetters)
                                {
                                    <p class="first-letter" data-letter="@item">@item</p>
                                }
                            </div>
                        </div>
                        <input type="hidden" id="firstLetterField" name="Filters.FirstLetter" asp-for="Filters.FirstLetter" />
                    </form>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div id="tabs">
                        <div class="tabContent">
                            @for (int i = 0; i < Model.Items.Count; i++)
                            {
                                <div class="one-line">
                                    <div class="top-line">
                                        <div class="left">
                                            <div class="contact">
                                                <p style="text-transform: uppercase;">
                                                    <strong>@Model.Items[i].LastName, @Model.Items[i].FirstName</strong>
                                                </p>
                                                <p class="text-p"><b>@Localizer["Email"]:</b> <a href="@Model.Items[i].Email">@Model.Items[i].Email</a></p>
                                                @{
                                                    var phoneDriver = string.Empty;
                                                    if (Model.Items[i]?.PhoneNumber != null && Model.Items[i]?.PhoneNumber.DialCode != 0 && !string.IsNullOrEmpty(Model.Items[i]?.PhoneNumber.Number))
                                                    {
                                                        phoneDriver = $"+{Model.Items[i].PhoneNumber.DialCode} {Model.Items[i].PhoneNumber.Number}";
                                                    }
                                                }
                                                <p class="text-p"><b>@Localizer["Phone"]:</b> <a href="tel:@Model.Items[i].PhoneNumber">@phoneDriver</a></p>
                                            </div>
                                        </div>
                                        <div class="right">
                                            @* <a href="@ViewBag.BaseUrl/Driver/Drivers/Edit?id=@Model.Items[i].Id" class="btn3">@Localizer["Edit"]</a> *@
                                            <a href="@ViewBag.BaseUrl/Drivers/Driver/@Model.Items[i].Id/" class="btn3">@Localizer["ViewDriver"]</a>
                                            <input class="btn3" value="@Localizer["Documents"]" type="button" onclick="window.location.href='Doc?id=@Model.Items[i].Id'" />
                                            <input class="btn3" value="@Localizer["RemindIns"]" type="button" onclick="SendRemindInspection(@Model.Items[i].Id, '@ViewBag.BaseUrl')" />
                                            <input class="btn3" type="button" value="@Localizer["Delete"]" onclick="ShowAlert(@Model.Items[i].Id)" data-toggle="modal" data-target="#dismissFormModal" />
                                            <div class="btn3" id="addEmail" data-toggle="modal" data-modal-selector="#createEmail" onclick="setEmailProperty('@Model.Items[i].Id')" href="#createEmail">@Localizer["AddEmail"]</div>
                                        </div>
                                    </div>
                                    <div class="top-line">
                                        <div class="left">
                                            <div class="contact">
                                            </div>
                                        </div>
                                        <div class="right">
                                           @*<a class="btn3" href="~/Driver/InspactionTrucks?driverId=@Model.Items[i].Id&idTruck=0&idTrailer=0&date=0">@Localizer["Inspection"]</a>*@
                                           
                                        </div>
                                    </div>
                                </div>
                            }
                            <pagination-list actual-pages="functions.GetPages(Model.Filters.Page, Model.Filters.CountPages)" sorts="@Model.Filters" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="dismissFormModal" tabindex="-1" role="dialog" aria-labelledby="dismissFormModalLabel" aria-hidden="true">
            <content class="ng-modal-wrapper">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                    <button type="button" style="font-size:22px;" class="close text-right button-close-modal" data-dismiss="modal" aria-label="Close">
                           <span aria-hidden="true">&#9587;</span>
                       </button>
                        <div class="modal-header modal-title">
                            <h1 class="text-center" id="DeleteDriverLabel">@Localizer["DriverReport"]</h1>
                        </div>
                        <div class="modal-body">
                            <input style="display:none;" name="experience" id="experienceInp" /><br />
                            <div class="form-group">
                                <label for>
                                    @Localizer["NumberOfAccidents"]
                                    <input id="numberOfAccidentsInp" type="number" class="modal-inp-text validation" required />
                                </label>
                            </div>
                            <div class="form-group">
                                <label for>
                                    @Localizer["DotViolations"]
                                    <input id="dotViolationsInp" type="text" class="modal-inp-text validation" required />
                                </label>
                            </div>
                            <div class="form-group">
                                <label for="">
                                    @Localizer["KnowledgeOfEnglish"] <span id="englishSpn">Poor</span>
                                    <input id="englishInp" type="range" class="input-modal validation" value="1" min="1" max="3" step="1" list="range-list" required />
                                    <div class="value-modal">
                                        <p>@Localizer["Poor"]</p>
                                        <p>@Localizer["Middle"]</p>
                                        <p>@Localizer["Good"]</p>
                                    </div>
                                </label>
                            </div>
                            <div class="form-group">
                                <label for="">
                                    @Localizer["ReturnedEquipment"] <span id="returnedEquipmenSpn">Poor</span>
                                    <input id="returnedEquipmenInp" type="range" class="input-modal" value="1" min="1" max="3" step="1" list="range-list" required />
                                    <div class="value-modal">
                                        <p>@Localizer["Poor"]</p>
                                        <p>@Localizer["Middle"]</p>
                                        <p>@Localizer["Good"]</p>
                                    </div>
                                </label>
                            </div>
                            <div class="form-group">
                                <label for="">
                                    @Localizer["WorkingEfficiency"] <span id="workingEfficiencySpn">Poor</span>
                                    <input id="workingEfficiencyInp" type="range" class="input-modal" value="1" min="1" max="3" step="1" list="range-list" required />
                                    <div class="value-modal">
                                        <p>@Localizer["Poor"]</p>
                                        <p>@Localizer["Middle"]</p>
                                        <p>@Localizer["Good"]</p>
                                    </div>
                                </label>
                            </div>
                            <div class="form-group">
                                <label for="">
                                    @Localizer["Eld"] <span id="eldKnowledgeSpn">Poor</span>
                                    <input id="eldKnowledgeInp" type="range" class="input-modal" value="1" min="1" max="3" step="1" list="range-list" required />
                                    <div class="value-modal">
                                        <p>@Localizer["Poor"]</p>
                                        <p>@Localizer["Middle"]</p>
                                        <p>@Localizer["Good"]</p>
                                    </div>
                                </label>
                            </div>
                            <div class="form-group">
                                <label for="">
                                    @Localizer["DrivingSkills"] <span id="drivingSkillsSpn">Poor</span>
                                    <input id="drivingSkillsInp" type="range" class="input-modal" value="1" min="1" max="3" step="1" list="range-list" required />
                                    <div class="value-modal">
                                        <p>@Localizer["Poor"]</p>
                                        <p>@Localizer["Middle"]</p>
                                        <p>@Localizer["Good"]</p>
                                    </div>
                                </label>
                            </div>
                            <div class="form-group">
                                <label for="">
                                    @Localizer["Payment"] <span id="paymentHandlingSpn">Poor</span>
                                    <input id="paymentHandlingInp" type="range" class="input-modal" value="1" min="1" max="3" step="1" list="range-list" required />
                                    <div class="value-modal">
                                        <p>@Localizer["Poor"]</p>
                                        <p>@Localizer["Middle"]</p>
                                        <p>@Localizer["Good"]</p>
                                    </div>
                                </label>
                            </div>
                            <div class="form-group">
                                <label for="">
                                    @Localizer["Alcohol"] <span id="alcoholTendencySpn">None</span>
                                    <input id="alcoholTendencyInp" type="range" class="input-modal" value="0" min="0" max="3" step="1" list="range-list" required />
                                    <div class="value-modal">
                                        <p>@Localizer["Poor"]</p>
                                        <p>@Localizer["Middle"]</p>
                                        <p>@Localizer["Good"]</p>
                                    </div>
                                </label>
                            </div>
                            <div class="form-group" style="margin-bottom: 0px;">
                                <label for="">
                                    @Localizer["DrugTendency"] <span id="drugTendencySpn">None</span>
                                    <input id="drugTendencyInp" type="range" class="input-modal" value="0" min="0" max="3" step="1" list="range-list" required />
                                    <div class="value-modal">
                                        <p>@Localizer["None"]</p>
                                        <p>@Localizer["Poor"]</p>
                                        <p>@Localizer["Middle"]</p>
                                        <p>@Localizer["Good"]</p>
                                    </div>
                                </label>
                            </div>
                            <div class="form-group mb-0">
                                <label class="mb-0" for="">
                                    @Localizer["Terminated"]
                                    <label style="display:none;" value="No" id="terminatedInp">@Localizer["Yes"]</label><br />
                                    <div class="value-elem">
                                        <input class="validation" checked required type="radio" name="terminated" onclick="changeTerminated('Yes');" />
                                        <span style="text-align:center;">@Localizer["Yes"]</span>
                                    </div>
                                    <div class="value-elem">
                                        <input class="validation" checked required type="radio" name="terminated" onclick="changeTerminated('No')" />
                                        <span style="text-align:center;">@Localizer["No"]</span>
                                    </div>
                                    <div class="value-elem if-true-terminated" style="display: none">
                                        <input class="validation" type="checkbox" value="Fired" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">Fired</span>
                                    </div>
                                    <div class="value-elem if-true-terminated" style="display: none">
                                        <input class="validation" type="checkbox" value="Quit" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">Quit</span>
                                    </div>
                                    <div class="value-elem if-true-terminated" style="display: none">
                                        <input class="validation" type="checkbox" value="Contract expiration" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">Contract expiration</span>
                                    </div>
                                    <div class="value-elem if-true-terminated" style="display: none">
                                        <input class="validation" type="checkbox" value="Left truck without a notice" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">Left truck without a notice</span>
                                    </div>
                                    <div class="value-elem if-true-terminated" style="display: none">
                                        <input class="validation" type="checkbox" value="Disappeared" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">Disappeared</span>
                                    </div>
                                </label>
                            </div>
                            <div class="form-group mb-0">
                                <label class="mb-0" for="">
                                    @Localizer["Experience"]
                                    <div class="value-elem">
                                        <input class="validation" type="checkbox" value="Boxes" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">@Localizer["Boxes"]</span>
                                    </div>
                                    <div class="value-elem">
                                        <input class="validation" type="checkbox" value="Enclosed car hauling" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">@Localizer["EnclosedCarHauling"]</span>
                                    </div>
                                    <div class="value-elem">
                                        <input class="validation" type="checkbox" value="Open car hauling" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">@Localizer["OpenCarHauling"]</span>
                                    </div>
                                    <div class="value-elem">
                                        <input class="validation" type="checkbox" value="Flatbed" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">@Localizer["Flatbed"]</span>
                                    </div>
                                    <div class="value-elem">
                                        <input class="validation" type="checkbox" value="Towing" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">@Localizer["Towing"]</span>
                                    </div>
                                    <div class="value-elem">
                                        <input class="validation" type="checkbox" value="Van" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">@Localizer["Van"]</span>
                                    </div>
                                    <div class="value-elem">
                                        <input class="validation" type="checkbox" value="Reefer" onclick="SelectExperience(this.value, this.checked)" />
                                        <span style="text-align:center;">@Localizer["Reefer"]</span>
                                    </div>
                                </label>
                            </div>
                            <div class="form-group mb-0">
                                <label for>
                                    @Localizer["Description"]
                                    <div class="value-elem">
                                        <textarea id="descriptionTA" type="text" class="modal-texAr-text validation" name="nameDoc" required></textarea>
                                    </div>
                                </label>
                            </div>
                            <button onclick="Remove()" class="btn1-spec btn-blue big-label">@Localizer["AddReportDriver"]</button>
                            <button class="btn3 btn3-spec" type="button" data-dismiss="modal">@Localizer["Close"]</button>
                        </div>
                    </div>
                </div>
            </content>
        </div>
    </div>

    <div id="confirmCreateEmailModalContainer"></div>
</body>

<script>
    $(document).ready(function () {
        $('#confirmCreateEmailModalContainer').load('@Url.Action("GetCreateEmailForm", "Driver")?modelId=' + `createEmail`, function () {
            $('#confirmCreateEmailModalContainer').on('submit', '#createEmail form', function (event) {
                event.preventDefault();
                var form = $('#createEmail form')[0];
        var formData = new FormData(form);

                $.ajax({
                    url: '@Url.Action("SendEmail", "Driver")',
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        SuccessAlert("@Localizer["EmailSuccessSend"]");
                        $("#createEmail").modal('hide');
                        $("#emailMessage").val('');
                    },
                    error: function () {
                        WarningAlert("@Localizer["EmailNotSend"]")
                    }
                });
            });
        });
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var currentFirstLetter = document.getElementById('firstLetterField').value;
        var currentLetterSpan = document.querySelector('.first-letter[data-letter="' + currentFirstLetter + '"]');
        if (currentLetterSpan) {
            currentLetterSpan.classList.add('selected-letter');
        }

        document.querySelectorAll('.first-letter').forEach(letter => {
            letter.addEventListener('click', function () {
                var currentFirstLetter = document.getElementById('firstLetterField').value;

                if (currentFirstLetter === this.dataset.letter) {
                    document.getElementById('firstLetterField').value = '';
                } else {
                    document.getElementById('firstLetterField').value = this.dataset.letter;
                }

                document.querySelectorAll('.first-letter').forEach(letter => {
                    letter.classList.remove('selected-letter');
                });

                this.classList.add('selected-letter');

                document.getElementById('searchForm').submit();
            });
        });
    });
</script>


<script>
    const optionalCheckBoxes = document.querySelectorAll(".if-true-terminated");

    function changeTerminated(changedValue) {
        terminatedInp.value = changedValue;
        if ('Yes' === changedValue){
            optionalCheckBoxes.forEach(x => x.style.display = '');
        }
        else{
            optionalCheckBoxes.forEach(x => x.style.display = 'none');
        }
    }

    var IdDriver;
    englishInp.oninput = function () {
        englishSpn.innerHTML = GetLevel(this.value);
    }

    returnedEquipmenInp.oninput = function () {
        returnedEquipmenSpn.innerHTML = GetLevel(this.value);
    }

    workingEfficiencyInp.oninput = function () {
        workingEfficiencySpn.innerHTML = GetLevel(this.value);
    }

    eldKnowledgeInp.oninput = function () {
        eldKnowledgeSpn.innerHTML = GetLevel(this.value);
    }

    drivingSkillsInp.oninput = function () {
        drivingSkillsSpn.innerHTML = GetLevel(this.value);
    }

    paymentHandlingInp.oninput = function () {
        paymentHandlingSpn.innerHTML = GetLevel(this.value);
    }

    alcoholTendencyInp.oninput = function () {
        alcoholTendencySpn.innerHTML = GetLevel(this.value);
    }

    drugTendencyInp.oninput = function () {
        drugTendencySpn.innerHTML = GetLevel(this.value);
    }

    function ShowAlert(idDriver) {
        IdDriver = idDriver;
    }

    function GetLevel(value) {
        if (value === "0") {
            return "None";
        }
        else if (value === "1") {
            return "Poor";
        }
        else if (value === "2") {
            return "Middle";
        }
        else if (value === "3") {
            return "Good";
        }
    }

    function SelectExperience(value, Checked) {
        if (Checked) {
            if (experienceInp.value == undefined) {
                experienceInp.value = "";
            }
            experienceInp.value += value + ", ";
        }
        else {
            experienceInp.value = experienceInp.value.replace(value + ", ", "");
        }
    }

    function Remove() {
        let descriptionTA = document.getElementById("descriptionTA");
        descriptionTA.validity.valid
        if (descriptionTA.validity.valid) {
            let body = "id=" + encodeURIComponent(IdDriver)
                + "&numberOfAccidents=" + encodeURIComponent(numberOfAccidentsInp.value)
                + "&english=" + encodeURIComponent(englishSpn.innerHTML)
                + "&returnedEquipmen=" + encodeURIComponent(returnedEquipmenSpn.innerHTML)
                + "&workingEfficiency=" + encodeURIComponent(workingEfficiencySpn.innerHTML)
                + "&eldKnowledge=" + encodeURIComponent(eldKnowledgeSpn.innerHTML)
                + "&drivingSkills=" + encodeURIComponent(drivingSkillsSpn.innerHTML)
                + "&paymentHandling=" + encodeURIComponent(paymentHandlingSpn.innerHTML)
                + "&alcoholTendency=" + encodeURIComponent(alcoholTendencySpn.innerHTML)
                + "&drugTendency=" + encodeURIComponent(drugTendencySpn.innerHTML)
                + "&terminated=" + encodeURIComponent(terminatedInp.value)
                + "&experience=" + encodeURIComponent(experienceInp.value)
                + "&dotViolations=" + encodeURIComponent(dotViolationsInp.value)
                + "&description=" + encodeURIComponent(descriptionTA.value)
                + "&localDate=" + GetDateTimeInFormat(new Date());

            $.ajax({
                type: "get",
                url: `/Driver/Drivers/Remove?${body}`,
                success: function () {
                    window.location.reload();
                },
                error: function (response) {
                }
            });
        }
    }
</script>

<script>
function SendRemindInspection(idDriver, url) {
    let urlBase = url+"/Driver/Remind/Inspection";
    let xmlHttp = new XMLHttpRequest();
    var body = 'driverId=' + encodeURIComponent(idDriver);
    xmlHttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            if (this.responseText == "true") {
                    SuccessAlert("@Localizer["ReminderSent"]")
            }
            else if (this.responseText == "false") {
                    WarningAlert("@Localizer["AlreadyPassed"]");
            }
            else if (this.responseText == "notlogin") {

            }
            else if (this.responseText == "error") {
                    ErrorAlert("@Localizer["ServerError"]");
            }
            else {
                ErrorAlert("@Localizer["ServerError"]");
            }
        }
        else if (this.readyState == 4 && this.status != 200) {
            ErrorAlert("@Localizer["ServerError"]");
        }
    };
    xmlHttp.open("POST", urlBase, true);
    xmlHttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xmlHttp.send(body);
}
</script>
<script src="~/js/notifications.js"></script>
<style>
    
    label {
        padding-left: 0px !important;
        padding-right: 0px !important;
    }

    span {
        font-weight: 400;
        color: #686F7C;
    }

    .btn-blue {
        background: #2C5DEB;
        color: #f9f9f9;
        border: 1px solid #2C5DEB;
        font-style: normal;
        font-weight: 700;
        font-size: 16px;
        line-height: 1.25;
        border-radius: 10px;
        padding: 16px 29px;
        display: inline-block;
        -webkit-transition: .3s all;
        -o-transition: .3s all;
        transition: .3s all
    }

        .btn-blue:hover {
            background: 0 0;
            border: 1px solid #2C5DEB;
            color: #2C5DEB;
            -webkit-transition: .3s all;
            -o-transition: .3s all;
            transition: .3s all
        }

    .btn-red {
        background: 0 0;
        color: #b42b2b;
        border: 1px solid #b42b2b;
        font-style: normal;
        font-weight: 700;
        font-size: 16px;
        line-height: 1.25;
        border-radius: 10px;
        padding: 16px 29px;
        display: inline-block;
        -webkit-transition: .3s all;
        -o-transition: .3s all;
        transition: .3s all
    }

        .btn-red:hover {
            background: #b42b2b;
            border: 1px solid #b42b2b;
            color: #f9f9f9;
            -webkit-transition: .3s all;
            -o-transition: .3s all;
            transition: .3s all
        }

    .form-group label {
        width: 100%;
        font-family: Montserrat;
        font-style: normal;
        font-weight: 700;
        font-size: 16px;
        line-height: 1.7;
        color: #08112b;
        text-align: left;
        margin-top: 0;
        display: block;
        margin-bottom: 15px;
    }

    .modal-dialog {
        top: 10%;
        left: 0;
        right: 0;
        text-align: center;
        background-color: #fff;
        -moz-box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.15), 0px 0px 1px 1px rgba(0, 0, 0, 0.05);
        -webkit-box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.15), 0px 0px 1px 1px rgba(0, 0, 0, 0.05);
        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.15), 0px 0px 1px 1px rgba(0, 0, 0, 0.05);
        transition: height 0.25s linear;
        -moz-border-radius: 10px;
        -webkit-border-radius: 10px;
        border-radius: 30px;
    }

    .modal-content {
        border: 0px;
        border-radius: 30px;
    }

    .ng-modal-wrapper {
        display: inline-block;
        vertical-align: middle;
        padding: 50px 0;
        width: 100%;
        position: relative;
    }

    .modal-dialog label {
        position: relative;
        display: inline-block;
        vertical-align: middle;
        cursor: pointer;
        padding: 3px 10px 4px;
        -moz-border-radius: 3px;
        -webkit-border-radius: 3px;
        margin-top: 2px;
        background: none;
        font-size: 16px;
        line-height: 19px;
        letter-spacing: -.016em;
        -moz-transition-property: all;
        -o-transition-property: all;
        -webkit-transition-property: all;
        transition-property: all;
        -moz-transition-duration: 300ms;
        -o-transition-duration: 300ms;
        -webkit-transition-duration: 300ms;
        transition-duration: 300ms;
        border-radius: 30px;
    }

    .modal-buttons .right-buttons {
        float: right;
    }

    .modal-inp-text {
        width: 100%;
        height: 54px;
        background: #fff;
        border: 1px solid #c4c9d5;
        border-radius: 10px;
        padding: 25px 15px;
        font-family: Montserrat;
        font-style: normal;
        font-weight: 400;
        font-size: 16px;
        line-height: 1.2;
        color: #686f7c;
        margin-top: 6px
    }

    .modal-title h1 {
        font-size: 36px;
    }

    .modal-header {
        justify-content: center;
        padding: 0 2rem 1rem 2rem;
        border-bottom: 0;
    }

    .big-label {
        width: 100% !important;
    }

    .btn1-spec {
        font-size: 24px !important;
    }

    .btn3-spec {
        font-size: 24px !important;
        width: 100% !important;
        margin-top: 15px !important;
        padding: 16px 29px !important;
    }

    .modal-texAr-text {
        -moz-border-radius: 3px;
        -webkit-border-radius: 3px;
        border-radius: 10px;
        border: 1px solid #d9d9d9;
        padding: 5px 8px;
        width: 100%;
        height: 200px;
        line-height: 22px;
    }

    .modal-buttons button, input {
        margin-top: 0;
    }

    .validation:invalid {
        border-color: red;
    }

    .validation:valid {
        border-color: #4ad73b;
    }

    .font-weight-normal {
        font-weight: 500;
    }

    .text-p {
        font-size: 20px;
    }

    p {
        font-size: 16px;
    }

    .modal-body {
        padding: 0px 30px 30px 30px;
    }

    .strong-a {
        color: #000000 !important;
        font-weight: 600;
    }

    .value-elem {
        margin-bottom: 10px;
        margin-top: 10px;
    }
</style>

<style>
    .item-search label {
        margin-bottom: 1rem;
    }

    .type-button {
        width: 100%;
    }

    .item-search {
        display: flex;
        margin-right: 0.5rem;
        max-width: 400px;
    }

    .big-item {
        max-width: 400px;
    }

    .small-item {
        max-width: 200px;
    }

    .btn1 {
        height: 54px;
        line-height: unset;
        padding: 8px 20px;
    }

    .item-search-button {
        margin-top: auto;
        margin-bottom: auto;
    }

    .sort-group {
        border-radius: 10px;
        background: #e0e0e0;
        font-size: 14px;
        font-weight: 600;
        color: #343a40;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .sort-group p{
        font-size: 16px;
        font-weight: 600;
    }

    .first-letter {
        cursor: pointer;
        padding: 8px 14px;
        border-radius: 12px;
        background-color: #dfdfdf;
        color: black;
        transition: all 0.3s;
    }

    .first-letter:hover {
        background-color: #e9e9e9;
    }

    .selected-letter {
        cursor: pointer;
        background-color: #007bff;
        border-radius: 12px;
        color: white;
        padding: 8px 14px;
    }

    .btn1-custom {
        cursor: pointer;
    }

    .btn1-custom:hover {
        background: #f9f9f9;
        border: 1px solid #2c5deb;
        color: #2c5deb;
        -webkit-transition: .3s all;
        -o-transition: .3s all;
        transition: .3s all
    }
</style>